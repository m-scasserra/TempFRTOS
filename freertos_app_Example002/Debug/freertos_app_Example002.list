
freertos_app_Example002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e80  08007e80  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e88  08007e88  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          00004594  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004664  20004664  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca51  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d58  00000000  00000000  0003cb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  000408b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001608  00000000  00000000  00042050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028efe  00000000  00000000  00043658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb93  00000000  00000000  0006c556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed7d1  00000000  00000000  000880e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001758ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006afc  00000000  00000000  0017590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079b4 	.word	0x080079b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	080079b4 	.word	0x080079b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <appInit>:


/*------------------------------------------------------------------*/
/* App Initialization */
void appInit( void )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af02      	add	r7, sp, #8
	/* Print out the name of this Example. */
  	vPrintString( pcTextForMain );
 800059a:	4ba6      	ldr	r3, [pc, #664]	; (8000834 <appInit+0x2a0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 f96e 	bl	8006880 <vPrintString>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a binary semaphore is created. */
    vSemaphoreCreateBinary( xBinarySemaphoreEntry    );
 80005a4:	2203      	movs	r2, #3
 80005a6:	2100      	movs	r1, #0
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 ffa5 	bl	80044f8 <xQueueGenericCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4aa1      	ldr	r2, [pc, #644]	; (8000838 <appInit+0x2a4>)
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4ba0      	ldr	r3, [pc, #640]	; (8000838 <appInit+0x2a4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <appInit+0x36>
 80005bc:	4b9e      	ldr	r3, [pc, #632]	; (8000838 <appInit+0x2a4>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	f004 f851 	bl	800466c <xQueueGenericSend>
    vSemaphoreCreateBinary( xBinarySemaphoreExit     );
 80005ca:	2203      	movs	r2, #3
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f003 ff92 	bl	80044f8 <xQueueGenericCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a99      	ldr	r2, [pc, #612]	; (800083c <appInit+0x2a8>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	4b98      	ldr	r3, [pc, #608]	; (800083c <appInit+0x2a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <appInit+0x5c>
 80005e2:	4b96      	ldr	r3, [pc, #600]	; (800083c <appInit+0x2a8>)
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 f83e 	bl	800466c <xQueueGenericSend>
    vSemaphoreCreateBinary( xBinarySemaphoreContinue );
 80005f0:	2203      	movs	r2, #3
 80005f2:	2100      	movs	r1, #0
 80005f4:	2001      	movs	r0, #1
 80005f6:	f003 ff7f 	bl	80044f8 <xQueueGenericCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a90      	ldr	r2, [pc, #576]	; (8000840 <appInit+0x2ac>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b8f      	ldr	r3, [pc, #572]	; (8000840 <appInit+0x2ac>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <appInit+0x82>
 8000608:	4b8d      	ldr	r3, [pc, #564]	; (8000840 <appInit+0x2ac>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f004 f82b 	bl	800466c <xQueueGenericSend>

    xCountingSemaphoreEntry = xSemaphoreCreateCounting(3, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2003      	movs	r0, #3
 800061a:	f003 fff4 	bl	8004606 <xQueueCreateCountingSemaphore>
 800061e:	4603      	mov	r3, r0
 8000620:	4a88      	ldr	r2, [pc, #544]	; (8000844 <appInit+0x2b0>)
 8000622:	6013      	str	r3, [r2, #0]
    xCountingSemaphoreExit = xSemaphoreCreateCounting(3, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	2003      	movs	r0, #3
 8000628:	f003 ffed 	bl	8004606 <xQueueCreateCountingSemaphore>
 800062c:	4603      	mov	r3, r0
 800062e:	4a86      	ldr	r2, [pc, #536]	; (8000848 <appInit+0x2b4>)
 8000630:	6013      	str	r3, [r2, #0]
    vSemaphoreCreateBinary( xBinarySemaphoreStop );
 8000632:	2203      	movs	r2, #3
 8000634:	2100      	movs	r1, #0
 8000636:	2001      	movs	r0, #1
 8000638:	f003 ff5e 	bl	80044f8 <xQueueGenericCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a83      	ldr	r2, [pc, #524]	; (800084c <appInit+0x2b8>)
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b82      	ldr	r3, [pc, #520]	; (800084c <appInit+0x2b8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <appInit+0xc4>
 800064a:	4b80      	ldr	r3, [pc, #512]	; (800084c <appInit+0x2b8>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	f004 f80a 	bl	800466c <xQueueGenericSend>

    colaEntrada = xQueueCreate(6, sizeof(uint8_t));
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	2006      	movs	r0, #6
 800065e:	f003 ff4b 	bl	80044f8 <xQueueGenericCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a7a      	ldr	r2, [pc, #488]	; (8000850 <appInit+0x2bc>)
 8000666:	6013      	str	r3, [r2, #0]
    configASSERT( colaEntrada !=  NULL );
 8000668:	4b79      	ldr	r3, [pc, #484]	; (8000850 <appInit+0x2bc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10a      	bne.n	8000686 <appInit+0xf2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000674:	f383 8811 	msr	BASEPRI, r3
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	f3bf 8f4f 	dsb	sy
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000682:	bf00      	nop
 8000684:	e7fe      	b.n	8000684 <appInit+0xf0>

    /* Check the semaphore was created successfully. */
	configASSERT( xBinarySemaphoreEntry    !=  NULL );
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <appInit+0x2a4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10a      	bne.n	80006a4 <appInit+0x110>
	__asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 80006a0:	bf00      	nop
 80006a2:	e7fe      	b.n	80006a2 <appInit+0x10e>
	configASSERT( xBinarySemaphoreExit     !=  NULL );
 80006a4:	4b65      	ldr	r3, [pc, #404]	; (800083c <appInit+0x2a8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10a      	bne.n	80006c2 <appInit+0x12e>
	__asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80006be:	bf00      	nop
 80006c0:	e7fe      	b.n	80006c0 <appInit+0x12c>
	configASSERT( xBinarySemaphoreContinue !=  NULL );
 80006c2:	4b5f      	ldr	r3, [pc, #380]	; (8000840 <appInit+0x2ac>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10a      	bne.n	80006e0 <appInit+0x14c>
	__asm volatile
 80006ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ce:	f383 8811 	msr	BASEPRI, r3
 80006d2:	f3bf 8f6f 	isb	sy
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80006dc:	bf00      	nop
 80006de:	e7fe      	b.n	80006de <appInit+0x14a>

	configASSERT( xCountingSemaphoreEntry  !=  NULL );
 80006e0:	4b58      	ldr	r3, [pc, #352]	; (8000844 <appInit+0x2b0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <appInit+0x16a>
	__asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	623b      	str	r3, [r7, #32]
}
 80006fa:	bf00      	nop
 80006fc:	e7fe      	b.n	80006fc <appInit+0x168>
	configASSERT( xCountingSemaphoreExit   !=  NULL );
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <appInit+0x2b4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10a      	bne.n	800071c <appInit+0x188>
	__asm volatile
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	61fb      	str	r3, [r7, #28]
}
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <appInit+0x186>
	configASSERT( xBinarySemaphoreStop     !=  NULL );
 800071c:	4b4b      	ldr	r3, [pc, #300]	; (800084c <appInit+0x2b8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10a      	bne.n	800073a <appInit+0x1a6>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	61bb      	str	r3, [r7, #24]
}
 8000736:	bf00      	nop
 8000738:	e7fe      	b.n	8000738 <appInit+0x1a4>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a mutex semaphore is created. */
    xMutexCola = xSemaphoreCreateMutex();
 800073a:	2001      	movs	r0, #1
 800073c:	f003 ff4b 	bl	80045d6 <xQueueCreateMutex>
 8000740:	4603      	mov	r3, r0
 8000742:	4a44      	ldr	r2, [pc, #272]	; (8000854 <appInit+0x2c0>)
 8000744:	6013      	str	r3, [r2, #0]
    xMutexContador = xSemaphoreCreateMutex();
 8000746:	2001      	movs	r0, #1
 8000748:	f003 ff45 	bl	80045d6 <xQueueCreateMutex>
 800074c:	4603      	mov	r3, r0
 800074e:	4a42      	ldr	r2, [pc, #264]	; (8000858 <appInit+0x2c4>)
 8000750:	6013      	str	r3, [r2, #0]

    /* Check the mutex was created successfully. */
    configASSERT( xMutexCola !=  NULL );
 8000752:	4b40      	ldr	r3, [pc, #256]	; (8000854 <appInit+0x2c0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10a      	bne.n	8000770 <appInit+0x1dc>
	__asm volatile
 800075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075e:	f383 8811 	msr	BASEPRI, r3
 8000762:	f3bf 8f6f 	isb	sy
 8000766:	f3bf 8f4f 	dsb	sy
 800076a:	617b      	str	r3, [r7, #20]
}
 800076c:	bf00      	nop
 800076e:	e7fe      	b.n	800076e <appInit+0x1da>
    configASSERT( xMutexContador !=  NULL );
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <appInit+0x2c4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10a      	bne.n	800078e <appInit+0x1fa>
	__asm volatile
 8000778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	613b      	str	r3, [r7, #16]
}
 800078a:	bf00      	nop
 800078c:	e7fe      	b.n	800078c <appInit+0x1f8>

	BaseType_t ret;

    /* Task A thread at priority 2 */
    ret = xTaskCreate( vTaskA,						/* Pointer to the function thats implement the task. */
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <appInit+0x2c8>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2302      	movs	r3, #2
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079c:	4930      	ldr	r1, [pc, #192]	; (8000860 <appInit+0x2cc>)
 800079e:	4831      	ldr	r0, [pc, #196]	; (8000864 <appInit+0x2d0>)
 80007a0:	f004 fb76 	bl	8004e90 <xTaskCreate>
 80007a4:	6378      	str	r0, [r7, #52]	; 0x34
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 1. 		*/
					   &vTaskAHandle );				/* We are using a variable as task handle.	*/

    /* Check the task was created successfully. */
    configASSERT( ret == pdPASS );
 80007a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d00a      	beq.n	80007c2 <appInit+0x22e>
	__asm volatile
 80007ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b0:	f383 8811 	msr	BASEPRI, r3
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	60fb      	str	r3, [r7, #12]
}
 80007be:	bf00      	nop
 80007c0:	e7fe      	b.n	80007c0 <appInit+0x22c>

    /* Task B thread at priority 2 */
    ret = xTaskCreate( vTaskB,						/* Pointer to the function thats implement the task. */
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <appInit+0x2d4>)
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2302      	movs	r3, #2
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d0:	4926      	ldr	r1, [pc, #152]	; (800086c <appInit+0x2d8>)
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <appInit+0x2dc>)
 80007d4:	f004 fb5c 	bl	8004e90 <xTaskCreate>
 80007d8:	6378      	str	r0, [r7, #52]	; 0x34
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 1. 		*/
					   &vTaskBHandle );				/* We are using a variable as task handle.	*/

    /* Check the task was created successfully. */
    configASSERT( ret == pdPASS );
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d00a      	beq.n	80007f6 <appInit+0x262>
	__asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	60bb      	str	r3, [r7, #8]
}
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <appInit+0x260>

	/* Task Test at priority 1, periodically excites the other tasks */
    ret = xTaskCreate( vTaskTest,					/* Pointer to the function thats implement the task. */
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <appInit+0x2e0>)
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000804:	491c      	ldr	r1, [pc, #112]	; (8000878 <appInit+0x2e4>)
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <appInit+0x2e8>)
 8000808:	f004 fb42 	bl	8004e90 <xTaskCreate>
 800080c:	6378      	str	r0, [r7, #52]	; 0x34
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 2. 		*/
					   &vTaskTestHandle );			/* We are using a variable as task handle.	*/

    /* Check the task was created successfully. */
    configASSERT( ret == pdPASS );
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	2b01      	cmp	r3, #1
 8000812:	d00a      	beq.n	800082a <appInit+0x296>
	__asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	607b      	str	r3, [r7, #4]
}
 8000826:	bf00      	nop
 8000828:	e7fe      	b.n	8000828 <appInit+0x294>
}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000
 8000838:	200000ec 	.word	0x200000ec
 800083c:	200000f0 	.word	0x200000f0
 8000840:	200000f4 	.word	0x200000f4
 8000844:	200000f8 	.word	0x200000f8
 8000848:	200000fc 	.word	0x200000fc
 800084c:	20000100 	.word	0x20000100
 8000850:	20000104 	.word	0x20000104
 8000854:	20000108 	.word	0x20000108
 8000858:	2000010c 	.word	0x2000010c
 800085c:	20000110 	.word	0x20000110
 8000860:	08007a00 	.word	0x08007a00
 8000864:	08000881 	.word	0x08000881
 8000868:	20000114 	.word	0x20000114
 800086c:	08007a08 	.word	0x08007a08
 8000870:	080009e1 	.word	0x080009e1
 8000874:	20000118 	.word	0x20000118
 8000878:	08007a10 	.word	0x08007a10
 800087c:	08000ad5 	.word	0x08000ad5

08000880 <vTaskA>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task A thread */
void vTaskA( void *pvParameters )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	/* Print out the name of this task. */
	vPrintString( pcTextForTaskA );
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <vTaskA+0x120>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fff7 	bl	8006880 <vPrintString>
	/* As per most tasks, this task is implemented within an infinite loop.
	 *
	 * Take the semaphore once to start with so the semaphore is empty before the
	 * infinite loop is entered.  The semaphore was created before the scheduler
	 * was started so before this task ran for the first time.*/
    xSemaphoreTake( xCountingSemaphoreEntry, (portTickType) 0 );
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <vTaskA+0x124>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f8c5 	bl	8004a28 <xQueueSemaphoreTake>
    xSemaphoreTake( xBinarySemaphoreContinue, (portTickType) 0 );
 800089e:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <vTaskA+0x128>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 f8bf 	bl	8004a28 <xQueueSemaphoreTake>

    /* Init Task A & B Counter and Reset Task A Flag	*/
    lTasksCnt = 0;
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <vTaskA+0x12c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
    lTaskAFlag = 0;
 80008b0:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <vTaskA+0x130>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
    {
        /* Use the semaphore to wait for the event.  The task blocks
         * indefinitely meaning this function call will only return once the
         * semaphore has been successfully obtained - so there is no need to check
         * the returned value. */
    	vPrintString( pcTextForTaskA_WaitEntry );
 80008b6:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <vTaskA+0x134>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 ffe0 	bl	8006880 <vPrintString>
    	xSemaphoreTake( xCountingSemaphoreEntry, portMAX_DELAY );
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <vTaskA+0x124>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 f8ad 	bl	8004a28 <xQueueSemaphoreTake>
        {

    		xSemaphoreTake( xMutexCola, portMAX_DELAY);
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <vTaskA+0x138>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 f8a6 	bl	8004a28 <xQueueSemaphoreTake>
    		xQueueReceive(colaEntrada, &entrada, portMAX_DELAY);
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <vTaskA+0x13c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008e4:	4936      	ldr	r1, [pc, #216]	; (80009c0 <vTaskA+0x140>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 ffbe 	bl	8004868 <xQueueReceive>
			if(entrada == 1){
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <vTaskA+0x140>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d104      	bne.n	80008fe <vTaskA+0x7e>
				vPrintString(pcTextforEntryA);
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <vTaskA+0x144>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 ffc1 	bl	8006880 <vPrintString>
			}
			if(entrada == 2){
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <vTaskA+0x140>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d104      	bne.n	8000910 <vTaskA+0x90>
				vPrintString(pcTextforEntryB);
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <vTaskA+0x148>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f005 ffb8 	bl	8006880 <vPrintString>
			}
			xSemaphoreGive( xMutexCola);
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <vTaskA+0x138>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f003 fea7 	bl	800466c <xQueueGenericSend>
    		 * Attempt to take the semaphore, blocking indefinitely if the mutex is not
    		 * available immediately.  The call to xSemaphoreTake() will only return when
    		 * the semaphore has been successfully obtained so there is no need to check
    		 * the return value.  If any other delay period was used then the code must
    		 * check that xSemaphoreTake() returns pdTRUE before accessing the resource. */
        	vPrintString( pcTextForTaskA_WaitMutex );
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <vTaskA+0x14c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f005 ffac 	bl	8006880 <vPrintString>
    		xSemaphoreTake( xMutexContador, portMAX_DELAY );
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <vTaskA+0x150>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f879 	bl	8004a28 <xQueueSemaphoreTake>
        	{
        		/* The following line will only execute once the semaphore has been
        		 * successfully obtained. */
        		/* Update Task A & B Counter */
    			lTasksCnt++;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <vTaskA+0x12c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <vTaskA+0x12c>)
 800093e:	6013      	str	r3, [r2, #0]
    			vPrintStringAndNumber( pcTextForTaskA_lTasksCnt, lTasksCnt);
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <vTaskA+0x154>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <vTaskA+0x12c>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f005 ffb2 	bl	80068b4 <vPrintStringAndNumber>

   			    /* Check Task A & B Counter	*/
    			if( lTasksCnt == lTasksCntMAX )
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <vTaskA+0x12c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d102      	bne.n	800095e <vTaskA+0xde>
    			{
       			    /* Set Task A Flag	*/
    				lTaskAFlag = 1;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <vTaskA+0x130>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
    			}
       			/* 'Give' the semaphore to unblock the tasks. */
       			vPrintString( pcTextForTaskA_SignalMutex );
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <vTaskA+0x158>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f005 ff8c 	bl	8006880 <vPrintString>
       			xSemaphoreGive( xMutexContador );
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <vTaskA+0x150>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	f003 fe7b 	bl	800466c <xQueueGenericSend>

   			    /* Check Task A Flag	*/
       			if( lTaskAFlag == 1 )
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <vTaskA+0x130>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d19b      	bne.n	80008b6 <vTaskA+0x36>
       			{
       			    /* Reset Task A Flag	*/
       			    lTaskAFlag = 0;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <vTaskA+0x130>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]

       		        /* Use the semaphore to wait for the event.  The task blocks
       		         * indefinitely meaning this function call will only return once the
       		         * semaphore has been successfully obtained - so there is no need to check
       		         * the returned value. */
       			    vPrintString( pcTextForTaskA_WaitContinue );
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <vTaskA+0x15c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f005 ff79 	bl	8006880 <vPrintString>
       	        	xSemaphoreTake( xBinarySemaphoreContinue, portMAX_DELAY );
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <vTaskA+0x128>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f846 	bl	8004a28 <xQueueSemaphoreTake>
    	vPrintString( pcTextForTaskA_WaitEntry );
 800099c:	e78b      	b.n	80008b6 <vTaskA+0x36>
 800099e:	bf00      	nop
 80009a0:	20000004 	.word	0x20000004
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	2000011c 	.word	0x2000011c
 80009b0:	20000120 	.word	0x20000120
 80009b4:	2000000c 	.word	0x2000000c
 80009b8:	20000108 	.word	0x20000108
 80009bc:	20000104 	.word	0x20000104
 80009c0:	20000124 	.word	0x20000124
 80009c4:	2000001c 	.word	0x2000001c
 80009c8:	20000020 	.word	0x20000020
 80009cc:	20000014 	.word	0x20000014
 80009d0:	2000010c 	.word	0x2000010c
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000018 	.word	0x20000018
 80009dc:	20000010 	.word	0x20000010

080009e0 <vTaskB>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task B thread */
void vTaskB( void *pvParameters )
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	/* Print out the name of this task. */
	vPrintString( pcTextForTaskB );
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <vTaskB+0xc4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 ff47 	bl	8006880 <vPrintString>
	/* As per most tasks, this task is implemented within an infinite loop.
	 *
	 * Take the semaphore once to start with so the semaphore is empty before the
	 * infinite loop is entered.  The semaphore was created before the scheduler
	 * was started so before this task ran for the first time.*/
    xSemaphoreTake( xBinarySemaphoreExit, (portTickType) 0 );
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <vTaskB+0xc8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f815 	bl	8004a28 <xQueueSemaphoreTake>


    /* Reset Task B Flag	*/
    lTaskBFlag = 0;
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <vTaskB+0xcc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]

    while( 1 )
    {
	    /* Toggle LD2 state */
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <vTaskB+0xd0>)
 8000a08:	f001 fc8d 	bl	8002326 <HAL_GPIO_TogglePin>

		/* Use the semaphore to wait for the event.  The task blocks
         * indefinitely meaning this function call will only return once the
         * semaphore has been successfully obtained - so there is no need to check
         * the returned value. */
		vPrintString( pcTextForTaskB_WaitExit );
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <vTaskB+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 ff35 	bl	8006880 <vPrintString>
        xSemaphoreTake( xBinarySemaphoreExit, portMAX_DELAY );
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <vTaskB+0xc8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 f802 	bl	8004a28 <xQueueSemaphoreTake>
    		 * Attempt to take the semaphore, blocking indefinitely if the mutex is not
    		 * available immediately.  The call to xSemaphoreTake() will only return when
    		 * the semaphore has been successfully obtained so there is no need to check
    		 * the return value.  If any other delay period was used then the code must
    		 * check that xSemaphoreTake() returns pdTRUE before accessing the resource. */
        	vPrintString( pcTextForTaskB_WaitMutex );
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <vTaskB+0xd8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 ff29 	bl	8006880 <vPrintString>
        	xSemaphoreTake( xMutexCola, portMAX_DELAY );
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <vTaskB+0xdc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fff6 	bl	8004a28 <xQueueSemaphoreTake>
        	{
        		/* The following line will only execute once the semaphore has been
        		 * successfully obtained. */

        		/* Update Task A & B Counter */
        		lTasksCnt--;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <vTaskB+0xe0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <vTaskB+0xe0>)
 8000a44:	6013      	str	r3, [r2, #0]
    			vPrintStringAndNumber( pcTextForTaskB_lTasksCnt, lTasksCnt);
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <vTaskB+0xe4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <vTaskB+0xe0>)
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 ff2f 	bl	80068b4 <vPrintStringAndNumber>

   			    /* Check Task A & B Counter	*/
    			if( lTasksCnt == (lTasksCntMAX - 1) )
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <vTaskB+0xe0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d102      	bne.n	8000a64 <vTaskB+0x84>
    			{
       			    /* Set Task B Flag	*/
    				lTaskBFlag = 1;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <vTaskB+0xcc>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
    			}
    			/* 'Give' the semaphore to unblock the tasks. */


        		vPrintString( pcTextForTaskB_SignalMutex );
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <vTaskB+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 ff09 	bl	8006880 <vPrintString>
        		xSemaphoreGive( xMutexCola );
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <vTaskB+0xdc>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	f003 fdf8 	bl	800466c <xQueueGenericSend>

   			    /* Check Task B Flag	*/
       			if( lTaskBFlag == 1 )
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <vTaskB+0xcc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d1bf      	bne.n	8000a04 <vTaskB+0x24>
       			{
       			    /* Reset Task B Flag	*/
       			    lTaskBFlag = 0;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <vTaskB+0xcc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]

        			/* 'Give' the semaphore to unblock the task A. */
       	        	vPrintString( pcTextForTaskB_SignalContinue );
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <vTaskB+0xec>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fef6 	bl	8006880 <vPrintString>
       	        	xSemaphoreGive( xBinarySemaphoreContinue );
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <vTaskB+0xf0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f003 fde5 	bl	800466c <xQueueGenericSend>
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 8000aa2:	e7af      	b.n	8000a04 <vTaskB+0x24>
 8000aa4:	20000024 	.word	0x20000024
 8000aa8:	200000f0 	.word	0x200000f0
 8000aac:	20000128 	.word	0x20000128
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	2000002c 	.word	0x2000002c
 8000ab8:	20000034 	.word	0x20000034
 8000abc:	20000108 	.word	0x20000108
 8000ac0:	2000011c 	.word	0x2000011c
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	20000038 	.word	0x20000038
 8000acc:	20000030 	.word	0x20000030
 8000ad0:	200000f4 	.word	0x200000f4

08000ad4 <vTaskTest>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Test thread */
void vTaskTest( void *pvParameters )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	uint32_t i = TEST_X;
 8000adc:	2306      	movs	r3, #6
 8000ade:	617b      	str	r3, [r7, #20]
	portTickType xLastWakeTime;
	UBaseType_t uxPriority;

	/* Print out the name, parameters and TEST_X of this task. */
	vPrintString( pcTextForTaskTest );
 8000ae0:	4b62      	ldr	r3, [pc, #392]	; (8000c6c <vTaskTest+0x198>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 fecb 	bl	8006880 <vPrintString>
	vPrintStringAndNumber( pcTextForTaskTest_TEST_X, i);
 8000aea:	4b61      	ldr	r3, [pc, #388]	; (8000c70 <vTaskTest+0x19c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6979      	ldr	r1, [r7, #20]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f005 fedf 	bl	80068b4 <vPrintStringAndNumber>

	/* The xLastWakeTime variable needs to be initialized with the current tick
	 * count.  Note that this is the only time we access this variable. From this
	 * point on xLastWakeTime is managed automatically by the vTaskDelayUntil()
	 * API function. */
	xLastWakeTime = xTaskGetTickCount();
 8000af6:	f004 fd85 	bl	8005604 <xTaskGetTickCount>
 8000afa:	4603      	mov	r3, r0
 8000afc:	60fb      	str	r3, [r7, #12]
	/* This task will run the first time after other tasks as it has the lower
	 * priority.
	 *
	 * Query the priority at which this task is running - passing in NULL means
	 * "return our own priority". */
	uxPriority = uxTaskPriorityGet( vTaskTestHandle ) + 2UL;
 8000afe:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <vTaskTest+0x1a0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fbc0 	bl	8005288 <uxTaskPriorityGet>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]

	/* Setting the TestingTask priority above the other tasks priority will
	 * cause TestingTask to immediately start running (as then TestingTask
	 * will have the higher priority of the three created tasks). */
	vPrintStringAndNumber( pcTextForTaskTest_priority, uxPriority );
 8000b0e:	4b5a      	ldr	r3, [pc, #360]	; (8000c78 <vTaskTest+0x1a4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 fecd 	bl	80068b4 <vPrintStringAndNumber>
	vTaskPrioritySet( vTaskTestHandle, uxPriority );
 8000b1a:	4b56      	ldr	r3, [pc, #344]	; (8000c74 <vTaskTest+0x1a0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6939      	ldr	r1, [r7, #16]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fbcb 	bl	80052bc <vTaskPrioritySet>

	while( 1 )
	{
		/* Scanning the array of events to excite tasks */
		for ( i = 0; i < (sizeof(eTaskTestArray)/sizeof(eTaskTest_t)); i++ )
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e09a      	b.n	8000c62 <vTaskTest+0x18e>
		{
		    /* Toggle LD1 state */
			HAL_GPIO_TogglePin( LD1_GPIO_Port, LD1_Pin );
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4853      	ldr	r0, [pc, #332]	; (8000c7c <vTaskTest+0x1a8>)
 8000b30:	f001 fbf9 	bl	8002326 <HAL_GPIO_TogglePin>

			vPrintTwoStrings( pcTaskGetName( vTaskTestHandle ), "- Running" );
 8000b34:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <vTaskTest+0x1a0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fd73 	bl	8005624 <pcTaskGetName>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	494f      	ldr	r1, [pc, #316]	; (8000c80 <vTaskTest+0x1ac>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 fed2 	bl	80068ec <vPrintTwoStrings>
			vPrintStringAndNumber( pcTextForTaskTest_eTaskTestArrayIndex, i);
 8000b48:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <vTaskTest+0x1b0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6979      	ldr	r1, [r7, #20]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 feb0 	bl	80068b4 <vPrintStringAndNumber>
			switch( eTaskTestArray[i] ) {
 8000b54:	4a4c      	ldr	r2, [pc, #304]	; (8000c88 <vTaskTest+0x1b4>)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d86a      	bhi.n	8000c38 <vTaskTest+0x164>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <vTaskTest+0x94>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000bbf 	.word	0x08000bbf
 8000b70:	08000bd9 	.word	0x08000bd9
 8000b74:	08000c1f 	.word	0x08000c1f

	    		case Entry_A:
	    			xSemaphoreTake(xMutexCola,portMAX_DELAY);
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <vTaskTest+0x1b8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 ff51 	bl	8004a28 <xQueueSemaphoreTake>
	    			xQueueSend(colaEntrada, &EntradaA, portMAX_DELAY);
 8000b86:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <vTaskTest+0x1bc>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b90:	4940      	ldr	r1, [pc, #256]	; (8000c94 <vTaskTest+0x1c0>)
 8000b92:	f003 fd6b 	bl	800466c <xQueueGenericSend>
				    /* 'Give' the semaphore to unblock the task A. */
		    		vPrintString( pcTextForTaskTest_SignalEntry );
 8000b96:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <vTaskTest+0x1c4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fe70 	bl	8006880 <vPrintString>
		    		xSemaphoreGive(xMutexCola);
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <vTaskTest+0x1b8>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f003 fd5f 	bl	800466c <xQueueGenericSend>
					xSemaphoreGive( xCountingSemaphoreEntry );
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <vTaskTest+0x1c8>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f003 fd58 	bl	800466c <xQueueGenericSend>
	    			break;
 8000bbc:	e042      	b.n	8000c44 <vTaskTest+0x170>

	    		case Exit_A:

				    /* 'Give' the semaphore to unblock the task B. */
		    		vPrintString( pcTextForTaskTest_SignalExit );
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <vTaskTest+0x1cc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fe5c 	bl	8006880 <vPrintString>
		    		xSemaphoreGive( xBinarySemaphoreExit );
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <vTaskTest+0x1d0>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f003 fd4b 	bl	800466c <xQueueGenericSend>
	    			break;
 8000bd6:	e035      	b.n	8000c44 <vTaskTest+0x170>
	    		case Entry_B:
	    			xSemaphoreTake(xMutexCola,portMAX_DELAY);
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <vTaskTest+0x1b8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 ff21 	bl	8004a28 <xQueueSemaphoreTake>
	    			xQueueSend(colaEntrada, &EntradaB, portMAX_DELAY);
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <vTaskTest+0x1bc>)
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	2300      	movs	r3, #0
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf0:	492d      	ldr	r1, [pc, #180]	; (8000ca8 <vTaskTest+0x1d4>)
 8000bf2:	f003 fd3b 	bl	800466c <xQueueGenericSend>
				    /* 'Give' the semaphore to unblock the task A. */
		    		vPrintString( pcTextForTaskTest_SignalEntry );
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <vTaskTest+0x1c4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fe40 	bl	8006880 <vPrintString>
		    		xSemaphoreGive(xMutexCola);
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <vTaskTest+0x1b8>)
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f003 fd2f 	bl	800466c <xQueueGenericSend>
					xSemaphoreGive( xCountingSemaphoreEntry );
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <vTaskTest+0x1c8>)
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	2300      	movs	r3, #0
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	f003 fd28 	bl	800466c <xQueueGenericSend>
	    			break;
 8000c1c:	e012      	b.n	8000c44 <vTaskTest+0x170>

	    		case Exit_B:

				    /* 'Give' the semaphore to unblock the task B. */
		    		vPrintString( pcTextForTaskTest_SignalExit );
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <vTaskTest+0x1cc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f005 fe2c 	bl	8006880 <vPrintString>
		    		xSemaphoreGive( xBinarySemaphoreExit );
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <vTaskTest+0x1d0>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 fd1b 	bl	800466c <xQueueGenericSend>
	    			break;
 8000c36:	e005      	b.n	8000c44 <vTaskTest+0x170>
		    	case Error:
		    	default:

		    		vPrintString( pcTextForTaskTest_SignalError );
 8000c38:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <vTaskTest+0x1d8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f005 fe1f 	bl	8006880 <vPrintString>
		    		break;
 8000c42:	bf00      	nop
			/* We want this task to execute exactly every 5000 milliseconds.  As per
			 * the vTaskDelay() function, time is measured in ticks, and the
			 * portTICK_RATE_MS constant is used to convert this to milliseconds.
			 * xLastWakeTime is automatically updated within vTaskDelayUntil() so does not
			 * have to be updated by this task code. */
		    vPrintString( pcTextForTaskTest_Wait5000mS );
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <vTaskTest+0x1dc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 fe19 	bl	8006880 <vPrintString>
    		vTaskDelayUntil( &xLastWakeTime, (5000 / portTICK_RATE_MS) );
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fa64 	bl	8005124 <vTaskDelayUntil>
		for ( i = 0; i < (sizeof(eTaskTestArray)/sizeof(eTaskTest_t)); i++ )
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b0b      	cmp	r3, #11
 8000c66:	f67f af61 	bls.w	8000b2c <vTaskTest+0x58>
 8000c6a:	e75c      	b.n	8000b26 <vTaskTest+0x52>
 8000c6c:	2000003c 	.word	0x2000003c
 8000c70:	20000040 	.word	0x20000040
 8000c74:	20000118 	.word	0x20000118
 8000c78:	20000044 	.word	0x20000044
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	08007d68 	.word	0x08007d68
 8000c84:	20000048 	.word	0x20000048
 8000c88:	08007dc4 	.word	0x08007dc4
 8000c8c:	20000108 	.word	0x20000108
 8000c90:	20000104 	.word	0x20000104
 8000c94:	08007dc1 	.word	0x08007dc1
 8000c98:	2000004c 	.word	0x2000004c
 8000c9c:	200000f8 	.word	0x200000f8
 8000ca0:	20000050 	.word	0x20000050
 8000ca4:	200000f0 	.word	0x200000f0
 8000ca8:	08007dc2 	.word	0x08007dc2
 8000cac:	20000054 	.word	0x20000054
 8000cb0:	20000058 	.word	0x20000058

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cba:	f000 fd13 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbe:	f000 f821 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc2:	f000 f92f 	bl	8000f24 <MX_GPIO_Init>
  MX_ETH_Init();
 8000cc6:	f000 f887 	bl	8000dd8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000cca:	f000 f8d3 	bl	8000e74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cce:	f000 f8fb 	bl	8000ec8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
    /* add application, ... */
  	  appInit();
 8000cd2:	f7ff fc5f 	bl	8000594 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <main+0x48>)
 8000cd8:	1d3c      	adds	r4, r7, #4
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 faae 	bl	800424a <osThreadCreate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <main+0x4c>)
 8000cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cf4:	f003 faa2 	bl	800423c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <main+0x44>
 8000cfa:	bf00      	nop
 8000cfc:	08007d80 	.word	0x08007d80
 8000d00:	200008a4 	.word	0x200008a4

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2230      	movs	r2, #48	; 0x30
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f006 f807 	bl	8006d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <SystemClock_Config+0xcc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <SystemClock_Config+0xd0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d78:	23a8      	movs	r3, #168	; 0xa8
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d80:	2307      	movs	r3, #7
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fc03 	bl	8002594 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d94:	f000 f990 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2105      	movs	r1, #5
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fe64 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dc2:	f000 f979 	bl	80010b8 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	; 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_ETH_Init+0x84>)
 8000dde:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <MX_ETH_Init+0x88>)
 8000de0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000df0:	22e1      	movs	r2, #225	; 0xe1
 8000df2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <MX_ETH_Init+0x8c>)
 8000e0a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e12:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <MX_ETH_Init+0x90>)
 8000e18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <MX_ETH_Init+0x94>)
 8000e1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_ETH_Init+0x84>)
 8000e2a:	f000 fda3 	bl	8001974 <HAL_ETH_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e34:	f000 f940 	bl	80010b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_ETH_Init+0x98>)
 8000e3e:	f005 ff72 	bl	8006d26 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_ETH_Init+0x98>)
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_ETH_Init+0x98>)
 8000e4a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e4e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_ETH_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200002a4 	.word	0x200002a4
 8000e60:	40028000 	.word	0x40028000
 8000e64:	200008a8 	.word	0x200008a8
 8000e68:	20000204 	.word	0x20000204
 8000e6c:	20000164 	.word	0x20000164
 8000e70:	2000012c 	.word	0x2000012c

08000e74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <MX_USART3_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART3_UART_Init+0x4c>)
 8000eac:	f002 faea 	bl	8003484 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f8ff 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000354 	.word	0x20000354
 8000ec4:	40004800 	.word	0x40004800

08000ec8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0c:	f001 fa25 	bl	800235a <HAL_PCD_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f16:	f000 f8cf 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000398 	.word	0x20000398

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b49      	ldr	r3, [pc, #292]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b45      	ldr	r3, [pc, #276]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a44      	ldr	r2, [pc, #272]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b42      	ldr	r3, [pc, #264]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <MX_GPIO_Init+0x14c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe8:	4822      	ldr	r0, [pc, #136]	; (8001074 <MX_GPIO_Init+0x150>)
 8000fea:	f001 f983 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <MX_GPIO_Init+0x154>)
 8000ff4:	f001 f97e 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	481b      	ldr	r0, [pc, #108]	; (800107c <MX_GPIO_Init+0x158>)
 8001010:	f000 ffc4 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001014:	f244 0381 	movw	r3, #16513	; 0x4081
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <MX_GPIO_Init+0x150>)
 800102e:	f000 ffb5 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0x154>)
 800104a:	f000 ffa7 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0x154>)
 8001062:	f000 ff9b 	bl	8001f9c <HAL_GPIO_Init>

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40021800 	.word	0x40021800
 800107c:	40020800 	.word	0x40020800

08001080 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8001088:	f24c 3050 	movw	r0, #50000	; 0xc350
 800108c:	f003 f904 	bl	8004298 <osDelay>
 8001090:	e7fa      	b.n	8001088 <StartDefaultTask+0x8>
	...

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f000 fb3f 	bl	8001728 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001400 	.word	0x40001400

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_MspInit+0x54>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_MspInit+0x54>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_MspInit+0x54>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_MspInit+0x54>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	f06f 0001 	mvn.w	r0, #1
 800110a:	f000 fc09 	bl	8001920 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a55      	ldr	r2, [pc, #340]	; (8001290 <HAL_ETH_MspInit+0x174>)
 800113a:	4293      	cmp	r3, r2
 800113c:	f040 80a4 	bne.w	8001288 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_ETH_MspInit+0x178>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800114a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_ETH_MspInit+0x178>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_ETH_MspInit+0x178>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_ETH_MspInit+0x178>)
 8001166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	4b49      	ldr	r3, [pc, #292]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <HAL_ETH_MspInit+0x178>)
 8001182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a3d      	ldr	r2, [pc, #244]	; (8001294 <HAL_ETH_MspInit+0x178>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a36      	ldr	r2, [pc, #216]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_ETH_MspInit+0x178>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001204:	2332      	movs	r3, #50	; 0x32
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001214:	230b      	movs	r3, #11
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	481e      	ldr	r0, [pc, #120]	; (8001298 <HAL_ETH_MspInit+0x17c>)
 8001220:	f000 febc 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001224:	2386      	movs	r3, #134	; 0x86
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001234:	230b      	movs	r3, #11
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	4817      	ldr	r0, [pc, #92]	; (800129c <HAL_ETH_MspInit+0x180>)
 8001240:	f000 feac 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001256:	230b      	movs	r3, #11
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <HAL_ETH_MspInit+0x184>)
 8001262:	f000 fe9b 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001266:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001278:	230b      	movs	r3, #11
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <HAL_ETH_MspInit+0x188>)
 8001284:	f000 fe8a 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3738      	adds	r7, #56	; 0x38
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40028000 	.word	0x40028000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40021800 	.word	0x40021800

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12c      	bne.n	8001324 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_UART_MspInit+0x8c>)
 8001320:	f000 fe3c 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40004800 	.word	0x40004800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020c00 	.word	0x40020c00

08001338 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001358:	d13f      	bne.n	80013da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001376:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001388:	230a      	movs	r3, #10
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <HAL_PCD_MspInit+0xb0>)
 8001394:	f000 fe02 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	; (80013e8 <HAL_PCD_MspInit+0xb0>)
 80013ae:	f000 fdf5 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6353      	str	r3, [r2, #52]	; 0x34
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_PCD_MspInit+0xac>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_InitTick+0xe4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_InitTick+0xe4>)
 8001406:	f043 0320 	orr.w	r3, r3, #32
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_InitTick+0xe4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001418:	f107 0210 	add.w	r2, r7, #16
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fd4e 	bl	8002ec4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001432:	f001 fd1f 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8001436:	6378      	str	r0, [r7, #52]	; 0x34
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800143a:	f001 fd1b 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 800143e:	4603      	mov	r3, r0
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <HAL_InitTick+0xe8>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9b      	lsrs	r3, r3, #18
 800144e:	3b01      	subs	r3, #1
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_InitTick+0xec>)
 8001454:	4a21      	ldr	r2, [pc, #132]	; (80014dc <HAL_InitTick+0xf0>)
 8001456:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_InitTick+0xec>)
 800145a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_InitTick+0xec>)
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_InitTick+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_InitTick+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_InitTick+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <HAL_InitTick+0xec>)
 800147a:	f001 fd55 	bl	8002f28 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11b      	bne.n	80014c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <HAL_InitTick+0xec>)
 800148e:	f001 fda5 	bl	8002fdc <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014a0:	2037      	movs	r0, #55	; 0x37
 80014a2:	f000 fa59 	bl	8001958 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d808      	bhi.n	80014be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	2037      	movs	r0, #55	; 0x37
 80014b2:	f000 fa35 	bl	8001920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_InitTick+0xf4>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e002      	b.n	80014c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	200008b0 	.word	0x200008b0
 80014dc:	40001400 	.word	0x40001400
 80014e0:	20000060 	.word	0x20000060

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM7_IRQHandler+0x10>)
 8001516:	f001 fdd1 	bl	80030bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200008b0 	.word	0x200008b0

08001524 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e00a      	b.n	800154c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001536:	f3af 8000 	nop.w
 800153a:	4601      	mov	r1, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf0      	blt.n	8001536 <_read+0x12>
	}

return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e009      	b.n	8001584 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f005 f96f 	bl	800685c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf1      	blt.n	8001570 <_write+0x12>
	}
	return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_close>:

int _close(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	605a      	str	r2, [r3, #4]
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_isatty>:

int _isatty(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f005 f974 	bl	800691c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20030000 	.word	0x20030000
 8001660:	00000400 	.word	0x00000400
 8001664:	200008f8 	.word	0x200008f8
 8001668:	20004668 	.word	0x20004668

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ffd7 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f005 fafd 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff faf7 	bl	8000cb4 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80016d4:	08007e90 	.word	0x08007e90
  ldr r2, =_sbss
 80016d8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80016dc:	20004664 	.word	0x20004664

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f8fc 	bl	800190a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f7ff fe6a 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fcd4 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000064 	.word	0x20000064
 800174c:	200008fc 	.word	0x200008fc

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200008fc 	.word	0x200008fc

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000064 	.word	0x20000064

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff4c 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001932:	f7ff ff61 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 8001936:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	6978      	ldr	r0, [r7, #20]
 800193e:	f7ff ffb1 	bl	80018a4 <NVIC_EncodePriority>
 8001942:	4602      	mov	r2, r0
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff80 	bl	8001850 <__NVIC_SetPriority>
}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff54 	bl	8001814 <__NVIC_EnableIRQ>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06c      	b.n	8001a60 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2223      	movs	r2, #35	; 0x23
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fbbf 	bl	800111c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_ETH_Init+0xf4>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_ETH_Init+0xf8>)
 80019d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f0:	f7ff feae 	bl	8001750 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f6:	e011      	b.n	8001a1c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f8:	f7ff feaa 	bl	8001750 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a06:	d909      	bls.n	8001a1c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	22e0      	movs	r2, #224	; 0xe0
 8001a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e021      	b.n	8001a60 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e4      	bne.n	80019f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f944 	bl	8001cbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f9eb 	bl	8001e10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa41 	bl	8001ec2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9a9 	bl	8001da0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800

08001a70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <ETH_SetMACConfig+0x134>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7c1b      	ldrb	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ETH_SetMACConfig+0x28>
 8001a92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a96:	e000      	b.n	8001a9a <ETH_SetMACConfig+0x2a>
 8001a98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7c5b      	ldrb	r3, [r3, #17]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetMACConfig+0x38>
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetMACConfig+0x3a>
 8001aa8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aaa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ab0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7fdb      	ldrb	r3, [r3, #31]
 8001ab6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	7f92      	ldrb	r2, [r2, #30]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_SetMACConfig+0x5e>
 8001ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x60>
 8001ace:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ade:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d102      	bne.n	8001af8 <ETH_SetMACConfig+0x88>
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	e000      	b.n	8001afa <ETH_SetMACConfig+0x8a>
 8001af8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001afa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7bdb      	ldrb	r3, [r3, #15]
 8001b00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fe1c 	bl	8001768 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b56:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001b5c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001b64:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001b6c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fdeb 	bl	8001768 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	ff20810f 	.word	0xff20810f

08001ba8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <ETH_SetDMAConfig+0x110>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	7b1b      	ldrb	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <ETH_SetDMAConfig+0x2c>
 8001bce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd2:	e000      	b.n	8001bd6 <ETH_SetDMAConfig+0x2e>
 8001bd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	7b5b      	ldrb	r3, [r3, #13]
 8001bda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	7f52      	ldrb	r2, [r2, #29]
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	d102      	bne.n	8001bec <ETH_SetDMAConfig+0x44>
 8001be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bea:	e000      	b.n	8001bee <ETH_SetDMAConfig+0x46>
 8001bec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7f1b      	ldrb	r3, [r3, #28]
 8001c02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7f9b      	ldrb	r3, [r3, #30]
 8001c0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff fd92 	bl	8001768 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff fd63 	bl	8001768 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	f8de3f23 	.word	0xf8de3f23

08001cbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0a6      	sub	sp, #152	; 0x98
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe9a 	bl	8001a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff08 	bl	8001ba8 <ETH_SetDMAConfig>
}
 8001d98:	bf00      	nop
 8001d9a:	3798      	adds	r7, #152	; 0x98
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3305      	adds	r3, #5
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	3204      	adds	r2, #4
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <ETH_MACAddressConfig+0x68>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3303      	adds	r3, #3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	061a      	lsls	r2, r3, #24
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3301      	adds	r3, #1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4313      	orrs	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <ETH_MACAddressConfig+0x6c>)
 8001df2:	4413      	add	r3, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40028040 	.word	0x40028040
 8001e0c:	40028044 	.word	0x40028044

08001e10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e03e      	b.n	8001e9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	3206      	adds	r2, #6
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d80c      	bhi.n	8001e80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e004      	b.n	8001e8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d9bd      	bls.n	8001e1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	611a      	str	r2, [r3, #16]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e046      	b.n	8001f5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	3212      	adds	r2, #18
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d80c      	bhi.n	8001f4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	e004      	b.n	8001f58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d9b5      	bls.n	8001ed0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8e:	60da      	str	r2, [r3, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e177      	b.n	80022a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8166 	bne.w	80022a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80c0 	beq.w	80022a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <HAL_GPIO_Init+0x324>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_GPIO_Init+0x328>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d037      	beq.n	80021da <HAL_GPIO_Init+0x23e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_GPIO_Init+0x330>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x23a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a56      	ldr	r2, [pc, #344]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x236>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <HAL_GPIO_Init+0x338>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x232>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_GPIO_Init+0x33c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x22e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a53      	ldr	r2, [pc, #332]	; (80022dc <HAL_GPIO_Init+0x340>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x22a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x344>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a51      	ldr	r2, [pc, #324]	; (80022e4 <HAL_GPIO_Init+0x348>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x222>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_GPIO_Init+0x34c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_GPIO_Init+0x350>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x21a>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e012      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e010      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00e      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00c      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00a      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e008      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021da:	2300      	movs	r3, #0
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ec:	4935      	ldr	r1, [pc, #212]	; (80022c4 <HAL_GPIO_Init+0x328>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_GPIO_Init+0x354>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002272:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_GPIO_Init+0x354>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_GPIO_Init+0x354>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	f67f ae84 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40021400 	.word	0x40021400
 80022e0:	40021800 	.word	0x40021800
 80022e4:	40021c00 	.word	0x40021c00
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40022400 	.word	0x40022400
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002338:	887a      	ldrh	r2, [r7, #2]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	041a      	lsls	r2, r3, #16
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43d9      	mvns	r1, r3
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	400b      	ands	r3, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235c:	b08f      	sub	sp, #60	; 0x3c
 800235e:	af0a      	add	r7, sp, #40	; 0x28
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e10f      	b.n	800258c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe ffd6 	bl	8001338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fc8d 	bl	8003cca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687e      	ldr	r6, [r7, #4]
 80023b8:	466d      	mov	r5, sp
 80023ba:	f106 0410 	add.w	r4, r6, #16
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ce:	1d33      	adds	r3, r6, #4
 80023d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f001 fc18 	bl	8003c08 <USB_CoreInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0d0      	b.n	800258c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fc7b 	bl	8003cec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e04a      	b.n	8002492 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	; 0x3d
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b298      	uxth	r0, r3
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	; 0x44
 8002438:	4602      	mov	r2, r0
 800243a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3340      	adds	r3, #64	; 0x40
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334c      	adds	r3, #76	; 0x4c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3354      	adds	r3, #84	; 0x54
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3af      	bcc.n	80023fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e044      	b.n	800252c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b5      	bcc.n	80024a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f001 fc13 	bl	8003d84 <USB_DevInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e00d      	b.n	800258c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fdde 	bl	8004146 <USB_DevDisconnect>

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e267      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d075      	beq.n	800269e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b2:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b85      	ldr	r3, [pc, #532]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d112      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05b      	beq.n	800269c <HAL_RCC_OscConfig+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d157      	bne.n	800269c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e242      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x74>
 80025fa:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a75      	ldr	r2, [pc, #468]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e01d      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6f      	ldr	r2, [pc, #444]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6c      	ldr	r2, [pc, #432]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800263e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff f880 	bl	8001750 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f87c 	bl	8001750 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e207      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b5b      	ldr	r3, [pc, #364]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0xc0>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff f86c 	bl	8001750 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff f868 	bl	8001750 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1f3      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	4b51      	ldr	r3, [pc, #324]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0xe8>
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d063      	beq.n	8002772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026aa:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d11c      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d116      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e1c7      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	e03a      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_OscConfig+0x244>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f821 	bl	8001750 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7ff f81d 	bl	8001750 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1a8      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4925      	ldr	r1, [pc, #148]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
 8002744:	e015      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_OscConfig+0x244>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7ff f800 	bl	8001750 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe fffc 	bl	8001750 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e187      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x248>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe ffe0 	bl	8001750 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe ffdc 	bl	8001750 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e167      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x200>
 80027b2:	e01b      	b.n	80027ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x248>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7fe ffc9 	bl	8001750 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	e00e      	b.n	80027e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c2:	f7fe ffc5 	bl	8001750 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d907      	bls.n	80027e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e150      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	42470000 	.word	0x42470000
 80027dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ea      	bne.n	80027c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8097 	beq.w	8002928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fe:	4b81      	ldr	r3, [pc, #516]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a7c      	ldr	r2, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <HAL_RCC_OscConfig+0x474>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002836:	4b74      	ldr	r3, [pc, #464]	; (8002a08 <HAL_RCC_OscConfig+0x474>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a73      	ldr	r2, [pc, #460]	; (8002a08 <HAL_RCC_OscConfig+0x474>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7fe ff85 	bl	8001750 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7fe ff81 	bl	8001750 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e10c      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <HAL_RCC_OscConfig+0x474>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x2ea>
 8002870:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a63      	ldr	r2, [pc, #396]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	e01c      	b.n	80028b8 <HAL_RCC_OscConfig+0x324>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x30c>
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a5e      	ldr	r2, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a5b      	ldr	r2, [pc, #364]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x324>
 80028a0:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a57      	ldr	r2, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	4b55      	ldr	r3, [pc, #340]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a54      	ldr	r2, [pc, #336]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f023 0304 	bic.w	r3, r3, #4
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe ff46 	bl	8001750 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe ff42 	bl	8001750 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0cb      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ee      	beq.n	80028c8 <HAL_RCC_OscConfig+0x334>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe ff30 	bl	8001750 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f4:	f7fe ff2c 	bl	8001750 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0b5      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290a:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ee      	bne.n	80028f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a1 	beq.w	8002a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d05c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d141      	bne.n	80029ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe ff00 	bl	8001750 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fefc 	bl	8001750 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e087      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	491b      	ldr	r1, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fed5 	bl	8001750 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fed1 	bl	8001750 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e05c      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x416>
 80029c8:	e054      	b.n	8002a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe febe 	bl	8001750 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe feba 	bl	8001750 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e045      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x444>
 80029f6:	e03d      	b.n	8002a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e038      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x4ec>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d028      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d121      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d11a      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cc      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d90c      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	494d      	ldr	r1, [pc, #308]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e067      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fdec 	bl	8001750 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fde8 	bl	8001750 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f821 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490a      	ldr	r1, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fbde 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08007dd0 	.word	0x08007dd0
 8002c48:	2000005c 	.word	0x2000005c
 8002c4c:	20000060 	.word	0x20000060

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b094      	sub	sp, #80	; 0x50
 8002c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c60:	2300      	movs	r3, #0
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c68:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d00d      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x40>
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	f200 80e1 	bhi.w	8002e3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c82:	e0db      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c88:	e0db      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8e:	e0d8      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	2200      	movs	r2, #0
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cba:	2300      	movs	r3, #0
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	f04f 0000 	mov.w	r0, #0
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	0159      	lsls	r1, r3, #5
 8002cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd4:	0150      	lsls	r0, r2, #5
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4621      	mov	r1, r4
 8002cdc:	1a51      	subs	r1, r2, r1
 8002cde:	6139      	str	r1, [r7, #16]
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	018b      	lsls	r3, r1, #6
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfe:	4651      	mov	r1, sl
 8002d00:	018a      	lsls	r2, r1, #6
 8002d02:	4651      	mov	r1, sl
 8002d04:	ebb2 0801 	subs.w	r8, r2, r1
 8002d08:	4659      	mov	r1, fp
 8002d0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	eb18 0303 	adds.w	r3, r8, r3
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	462b      	mov	r3, r5
 8002d30:	eb49 0303 	adc.w	r3, r9, r3
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d42:	4629      	mov	r1, r5
 8002d44:	024b      	lsls	r3, r1, #9
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	024a      	lsls	r2, r1, #9
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	2200      	movs	r2, #0
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d60:	f7fd fa96 	bl	8000290 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6c:	e058      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	4611      	mov	r1, r2
 8002d7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d88:	4642      	mov	r2, r8
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	0159      	lsls	r1, r3, #5
 8002d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9a:	0150      	lsls	r0, r2, #5
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4641      	mov	r1, r8
 8002da2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002da6:	4649      	mov	r1, r9
 8002da8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002db8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	00eb      	lsls	r3, r5, #3
 8002dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dd6:	00e2      	lsls	r2, r4, #3
 8002dd8:	4614      	mov	r4, r2
 8002dda:	461d      	mov	r5, r3
 8002ddc:	4643      	mov	r3, r8
 8002dde:	18e3      	adds	r3, r4, r3
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	464b      	mov	r3, r9
 8002de4:	eb45 0303 	adc.w	r3, r5, r3
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002df6:	4629      	mov	r1, r5
 8002df8:	028b      	lsls	r3, r1, #10
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e00:	4621      	mov	r1, r4
 8002e02:	028a      	lsls	r2, r1, #10
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	61fa      	str	r2, [r7, #28]
 8002e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e14:	f7fd fa3c 	bl	8000290 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3750      	adds	r7, #80	; 0x50
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000005c 	.word	0x2000005c

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0a9b      	lsrs	r3, r3, #10
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	08007de0 	.word	0x08007de0

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffdc 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0b5b      	lsrs	r3, r3, #13
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	08007de0 	.word	0x08007de0

08002ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_RCC_GetClockConfig+0x60>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40023c00 	.word	0x40023c00

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f839 	bl	8002fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 f9d8 	bl	800331c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e04e      	b.n	8003092 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301e:	d01d      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d018      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_TIM_Base_Start_IT+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00e      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b06      	cmp	r3, #6
 800306c:	d010      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	e007      	b.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40010400 	.word	0x40010400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40001800 	.word	0x40001800

080030bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8ee 	bl	80032e0 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8e0 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f8f1 	bl	80032f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0204 	mvn.w	r2, #4
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8c4 	bl	80032e0 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8b6 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f8c7 	bl	80032f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f89a 	bl	80032e0 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f88c 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f89d 	bl	80032f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0210 	mvn.w	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2208      	movs	r2, #8
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f870 	bl	80032e0 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f862 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f873 	bl	80032f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0201 	mvn.w	r2, #1
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd ff2a 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f902 	bl	8003470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f838 	bl	8003308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0220 	mvn.w	r2, #32
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8cc 	bl	800345c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a40      	ldr	r2, [pc, #256]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d00f      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <TIM_Base_SetConfig+0x118>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00b      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <TIM_Base_SetConfig+0x11c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3b      	ldr	r2, [pc, #236]	; (800343c <TIM_Base_SetConfig+0x120>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <TIM_Base_SetConfig+0x124>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d027      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <TIM_Base_SetConfig+0x118>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d023      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <TIM_Base_SetConfig+0x11c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01f      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2a      	ldr	r2, [pc, #168]	; (800343c <TIM_Base_SetConfig+0x120>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <TIM_Base_SetConfig+0x124>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d017      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <TIM_Base_SetConfig+0x128>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a27      	ldr	r2, [pc, #156]	; (8003448 <TIM_Base_SetConfig+0x12c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <TIM_Base_SetConfig+0x130>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a25      	ldr	r2, [pc, #148]	; (8003450 <TIM_Base_SetConfig+0x134>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <TIM_Base_SetConfig+0x138>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <TIM_Base_SetConfig+0x13c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <TIM_Base_SetConfig+0x114>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0xf8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <TIM_Base_SetConfig+0x124>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d103      	bne.n	800341c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	615a      	str	r2, [r3, #20]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fefc 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f929 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b08a      	sub	sp, #40	; 0x28
 8003522:	af02      	add	r7, sp, #8
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	d17c      	bne.n	8003638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_UART_Transmit+0x2c>
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e075      	b.n	800363a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_UART_Transmit+0x3e>
 8003558:	2302      	movs	r3, #2
 800355a:	e06e      	b.n	800363a <HAL_UART_Transmit+0x11c>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2221      	movs	r2, #33	; 0x21
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003572:	f7fe f8ed 	bl	8001750 <HAL_GetTick>
 8003576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Transmit+0x82>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035b0:	e02a      	b.n	8003608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f840 	bl	8003642 <UART_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e036      	b.n	800363a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	3302      	adds	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e007      	b.n	80035fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1cf      	bne.n	80035b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2140      	movs	r1, #64	; 0x40
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f810 	bl	8003642 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e006      	b.n	800363a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b090      	sub	sp, #64	; 0x40
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003652:	e050      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365a:	d04c      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <UART_WaitOnFlagUntilTimeout+0x30>
 8003662:	f7fe f875 	bl	8001750 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366e:	429a      	cmp	r2, r3
 8003670:	d241      	bcs.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003692:	637a      	str	r2, [r7, #52]	; 0x34
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e5      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	613b      	str	r3, [r7, #16]
   return(result);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c6:	623a      	str	r2, [r7, #32]
 80036c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e5      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d09f      	beq.n	8003654 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3740      	adds	r7, #64	; 0x40
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0c0      	sub	sp, #256	; 0x100
 8003726:	af00      	add	r7, sp, #0
 8003728:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	68d9      	ldr	r1, [r3, #12]
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	ea40 0301 	orr.w	r3, r0, r1
 8003748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	431a      	orrs	r2, r3
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003778:	f021 010c 	bic.w	r1, r1, #12
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003786:	430b      	orrs	r3, r1
 8003788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	6999      	ldr	r1, [r3, #24]
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	ea40 0301 	orr.w	r3, r0, r1
 80037a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b8f      	ldr	r3, [pc, #572]	; (80039ec <UART_SetConfig+0x2cc>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d005      	beq.n	80037c0 <UART_SetConfig+0xa0>
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <UART_SetConfig+0x2d0>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d104      	bne.n	80037ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff fb6c 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 80037c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037c8:	e003      	b.n	80037d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7ff fb53 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80037ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037dc:	f040 810c 	bne.w	80039f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	1891      	adds	r1, r2, r2
 80037f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80037fa:	415b      	adcs	r3, r3
 80037fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003802:	4621      	mov	r1, r4
 8003804:	eb12 0801 	adds.w	r8, r2, r1
 8003808:	4629      	mov	r1, r5
 800380a:	eb43 0901 	adc.w	r9, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003822:	4690      	mov	r8, r2
 8003824:	4699      	mov	r9, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb18 0303 	adds.w	r3, r8, r3
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003830:	462b      	mov	r3, r5
 8003832:	eb49 0303 	adc.w	r3, r9, r3
 8003836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003846:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800384a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800384e:	460b      	mov	r3, r1
 8003850:	18db      	adds	r3, r3, r3
 8003852:	653b      	str	r3, [r7, #80]	; 0x50
 8003854:	4613      	mov	r3, r2
 8003856:	eb42 0303 	adc.w	r3, r2, r3
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
 800385c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003864:	f7fc fd14 	bl	8000290 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <UART_SetConfig+0x2d4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003880:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003890:	415b      	adcs	r3, r3
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003898:	4641      	mov	r1, r8
 800389a:	eb12 0a01 	adds.w	sl, r2, r1
 800389e:	4649      	mov	r1, r9
 80038a0:	eb43 0b01 	adc.w	fp, r3, r1
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	4692      	mov	sl, r2
 80038ba:	469b      	mov	fp, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	eb1a 0303 	adds.w	r3, sl, r3
 80038c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb4b 0303 	adc.w	r3, fp, r3
 80038cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
 80038f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038fa:	f7fc fcc9 	bl	8000290 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4611      	mov	r1, r2
 8003904:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <UART_SetConfig+0x2d4>)
 8003906:	fba3 2301 	umull	r2, r3, r3, r1
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2264      	movs	r2, #100	; 0x64
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800391a:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <UART_SetConfig+0x2d4>)
 800391c:	fba3 2302 	umull	r2, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003928:	441c      	add	r4, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003934:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	63b9      	str	r1, [r7, #56]	; 0x38
 8003944:	415b      	adcs	r3, r3
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6339      	str	r1, [r7, #48]	; 0x30
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003998:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800399c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039a0:	460b      	mov	r3, r1
 80039a2:	18db      	adds	r3, r3, r3
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039b6:	f7fc fc6b 	bl	8000290 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	; 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3332      	adds	r3, #50	; 0x32
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <UART_SetConfig+0x2d4>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 0207 	and.w	r2, r3, #7
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4422      	add	r2, r4
 80039e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e8:	e105      	b.n	8003bf6 <UART_SetConfig+0x4d6>
 80039ea:	bf00      	nop
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40011400 	.word	0x40011400
 80039f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	6239      	str	r1, [r7, #32]
 8003a12:	415b      	adcs	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	1854      	adds	r4, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb43 0501 	adc.w	r5, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	00eb      	lsls	r3, r5, #3
 8003a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a32:	00e2      	lsls	r2, r4, #3
 8003a34:	4614      	mov	r4, r2
 8003a36:	461d      	mov	r5, r3
 8003a38:	4643      	mov	r3, r8
 8003a3a:	18e3      	adds	r3, r4, r3
 8003a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a40:	464b      	mov	r3, r9
 8003a42:	eb45 0303 	adc.w	r3, r5, r3
 8003a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a66:	4629      	mov	r1, r5
 8003a68:	008b      	lsls	r3, r1, #2
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a70:	4621      	mov	r1, r4
 8003a72:	008a      	lsls	r2, r1, #2
 8003a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a78:	f7fc fc0a 	bl	8000290 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <UART_SetConfig+0x4e4>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	61b9      	str	r1, [r7, #24]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6139      	str	r1, [r7, #16]
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b04:	4649      	mov	r1, r9
 8003b06:	008b      	lsls	r3, r1, #2
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0e:	4641      	mov	r1, r8
 8003b10:	008a      	lsls	r2, r1, #2
 8003b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b16:	f7fc fbbb 	bl	8000290 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <UART_SetConfig+0x4e4>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <UART_SetConfig+0x4e4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3e:	441c      	add	r4, r3
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	673b      	str	r3, [r7, #112]	; 0x70
 8003b48:	677a      	str	r2, [r7, #116]	; 0x74
 8003b4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b4e:	4642      	mov	r2, r8
 8003b50:	464b      	mov	r3, r9
 8003b52:	1891      	adds	r1, r2, r2
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	415b      	adcs	r3, r3
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b5e:	4641      	mov	r1, r8
 8003b60:	1851      	adds	r1, r2, r1
 8003b62:	6039      	str	r1, [r7, #0]
 8003b64:	4649      	mov	r1, r9
 8003b66:	414b      	adcs	r3, r1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b76:	4659      	mov	r1, fp
 8003b78:	00cb      	lsls	r3, r1, #3
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b80:	4651      	mov	r1, sl
 8003b82:	00ca      	lsls	r2, r1, #3
 8003b84:	4610      	mov	r0, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b90:	464b      	mov	r3, r9
 8003b92:	460a      	mov	r2, r1
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	008b      	lsls	r3, r1, #2
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	008a      	lsls	r2, r1, #2
 8003bc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bc4:	f7fc fb64 	bl	8000290 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <UART_SetConfig+0x4e4>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <UART_SetConfig+0x4e4>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4422      	add	r2, r4
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c08:	b084      	sub	sp, #16
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	f107 001c 	add.w	r0, r7, #28
 8003c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d122      	bne.n	8003c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 faa2 	bl	80041a4 <USB_CoreReset>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e01a      	b.n	8003c9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa96 	bl	80041a4 <USB_CoreReset>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	e005      	b.n	8003c9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10b      	bne.n	8003cba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f043 0206 	orr.w	r2, r3, #6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cc6:	b004      	add	sp, #16
 8003cc8:	4770      	bx	lr

08003cca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0201 	bic.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d115      	bne.n	8003d3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7fd fd24 	bl	8001768 <HAL_Delay>
      ms++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3301      	adds	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa2e 	bl	8004188 <USB_GetMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d01e      	beq.n	8003d70 <USB_SetCurrentMode+0x84>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b31      	cmp	r3, #49	; 0x31
 8003d36:	d9f0      	bls.n	8003d1a <USB_SetCurrentMode+0x2e>
 8003d38:	e01a      	b.n	8003d70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d115      	bne.n	8003d6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7fd fd0b 	bl	8001768 <HAL_Delay>
      ms++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa15 	bl	8004188 <USB_GetMode>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <USB_SetCurrentMode+0x84>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b31      	cmp	r3, #49	; 0x31
 8003d68:	d9f0      	bls.n	8003d4c <USB_SetCurrentMode+0x60>
 8003d6a:	e001      	b.n	8003d70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e005      	b.n	8003d7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b32      	cmp	r3, #50	; 0x32
 8003d74:	d101      	bne.n	8003d7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d84:	b084      	sub	sp, #16
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e009      	b.n	8003db8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3340      	adds	r3, #64	; 0x40
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3301      	adds	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0e      	cmp	r3, #14
 8003dbc:	d9f2      	bls.n	8003da4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11c      	bne.n	8003dfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8003dfc:	e00b      	b.n	8003e16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e28:	4619      	mov	r1, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	461a      	mov	r2, r3
 8003e32:	680b      	ldr	r3, [r1, #0]
 8003e34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10c      	bne.n	8003e56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e42:	2100      	movs	r1, #0
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f965 	bl	8004114 <USB_SetDevSpeed>
 8003e4a:	e008      	b.n	8003e5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f960 	bl	8004114 <USB_SetDevSpeed>
 8003e54:	e003      	b.n	8003e5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e56:	2103      	movs	r1, #3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f95b 	bl	8004114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e5e:	2110      	movs	r1, #16
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8f3 	bl	800404c <USB_FlushTxFifo>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f91f 	bl	80040b4 <USB_FlushRxFifo>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	461a      	mov	r2, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e043      	b.n	8003f32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec0:	d118      	bne.n	8003ef4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e013      	b.n	8003f06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	461a      	mov	r2, r3
 8003eec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e008      	b.n	8003f06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	461a      	mov	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	461a      	mov	r2, r3
 8003f14:	2300      	movs	r3, #0
 8003f16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	461a      	mov	r2, r3
 8003f26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3b7      	bcc.n	8003eaa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	e043      	b.n	8003fc8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f56:	d118      	bne.n	8003f8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e013      	b.n	8003f9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	461a      	mov	r2, r3
 8003f82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e008      	b.n	8003f9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3b7      	bcc.n	8003f40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ff0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <USB_DevInit+0x2c4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f043 0208 	orr.w	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004044:	b004      	add	sp, #16
 8004046:	4770      	bx	lr
 8004048:	803c3800 	.word	0x803c3800

0800404c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <USB_FlushTxFifo+0x64>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e01b      	b.n	80040a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	daf2      	bge.n	800405a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	019b      	lsls	r3, r3, #6
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <USB_FlushTxFifo+0x64>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e006      	b.n	80040a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d0f0      	beq.n	8004084 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	00030d40 	.word	0x00030d40

080040b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <USB_FlushRxFifo+0x5c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e018      	b.n	8004104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	daf2      	bge.n	80040c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2210      	movs	r2, #16
 80040e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <USB_FlushRxFifo+0x5c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e006      	b.n	8004104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d0f0      	beq.n	80040e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	00030d40 	.word	0x00030d40

08004114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004160:	f023 0303 	bic.w	r3, r3, #3
 8004164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0301 	and.w	r3, r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <USB_CoreReset+0x64>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e01b      	b.n	80041fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	daf2      	bge.n	80041b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <USB_CoreReset+0x64>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e006      	b.n	80041fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d0f0      	beq.n	80041da <USB_CoreReset+0x36>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	00030d40 	.word	0x00030d40

0800420c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800421a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800421e:	2b84      	cmp	r3, #132	; 0x84
 8004220:	d005      	beq.n	800422e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004222:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	3303      	adds	r3, #3
 800422c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004240:	f001 f8e6 	bl	8005410 <vTaskStartScheduler>
  
  return osOK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}

0800424a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800424a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424c:	b087      	sub	sp, #28
 800424e:	af02      	add	r7, sp, #8
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685c      	ldr	r4, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004260:	b29e      	uxth	r6, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ffcf 	bl	800420c <makeFreeRtosPriority>
 800426e:	4602      	mov	r2, r0
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	9200      	str	r2, [sp, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4632      	mov	r2, r6
 800427c:	4629      	mov	r1, r5
 800427e:	4620      	mov	r0, r4
 8004280:	f000 fe06 	bl	8004e90 <xTaskCreate>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004298 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <osDelay+0x16>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	e000      	b.n	80042b0 <osDelay+0x18>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 ffb5 	bl	8005220 <vTaskDelay>
  
  return osOK;
 80042b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f103 0208 	add.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f103 0208 	add.w	r2, r3, #8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f103 0208 	add.w	r2, r3, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004378:	d103      	bne.n	8004382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e00c      	b.n	800439c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3308      	adds	r3, #8
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e002      	b.n	8004390 <vListInsert+0x2e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	d2f6      	bcs.n	800438a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6852      	ldr	r2, [r2, #4]
 80043f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d103      	bne.n	8004408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1e5a      	subs	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <xQueueGenericReset+0x2a>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60bb      	str	r3, [r7, #8]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004452:	f001 ff37 	bl	80062c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	3b01      	subs	r3, #1
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d114      	bne.n	80044d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3310      	adds	r3, #16
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 fa17 	bl	80058e8 <xTaskRemoveFromEventList>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d012      	beq.n	80044e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <xQueueGenericReset+0xcc>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	e009      	b.n	80044e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3310      	adds	r3, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fef2 	bl	80042c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff feed 	bl	80042c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044e6:	f001 ff1d 	bl	8006324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xQueueGenericCreate+0x2a>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	613b      	str	r3, [r7, #16]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3348      	adds	r3, #72	; 0x48
 8004530:	4618      	mov	r0, r3
 8004532:	f001 ffa9 	bl	8006488 <pvPortMalloc>
 8004536:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	3348      	adds	r3, #72	; 0x48
 8004546:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004548:	79fa      	ldrb	r2, [r7, #7]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f805 	bl	8004564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800455a:	69bb      	ldr	r3, [r7, #24]
	}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e002      	b.n	8004586 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004592:	2101      	movs	r1, #1
 8004594:	69b8      	ldr	r0, [r7, #24]
 8004596:	f7ff ff47 	bl	8004428 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045c2:	2300      	movs	r3, #0
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f84f 	bl	800466c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	461a      	mov	r2, r3
 80045ec:	6939      	ldr	r1, [r7, #16]
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f7ff ff82 	bl	80044f8 <xQueueGenericCreate>
 80045f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff ffd3 	bl	80045a2 <prvInitialiseMutex>

		return xNewQueue;
 80045fc:	68fb      	ldr	r3, [r7, #12]
	}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	613b      	str	r3, [r7, #16]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d90a      	bls.n	800464a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800464a:	2202      	movs	r2, #2
 800464c:	2100      	movs	r1, #0
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff52 	bl	80044f8 <xQueueGenericCreate>
 8004654:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004662:	697b      	ldr	r3, [r7, #20]
	}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08e      	sub	sp, #56	; 0x38
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueGenericSend+0x32>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <xQueueGenericSend+0x40>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <xQueueGenericSend+0x44>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <xQueueGenericSend+0x46>
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xQueueGenericSend+0x60>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x6e>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <xQueueGenericSend+0x72>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericSend+0x74>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueGenericSend+0x8e>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 fa97 	bl	8005c2c <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueGenericSend+0x9e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueGenericSend+0xa2>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueGenericSend+0xa4>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueGenericSend+0xbe>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61fb      	str	r3, [r7, #28]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472a:	f001 fdcb 	bl	80062c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <xQueueGenericSend+0xd4>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d129      	bne.n	8004794 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004746:	f000 fa93 	bl	8004c70 <prvCopyDataToQueue>
 800474a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	4618      	mov	r0, r3
 800475a:	f001 f8c5 	bl	80058e8 <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004764:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <xQueueGenericSend+0x1f8>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	e00a      	b.n	800478c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <xQueueGenericSend+0x1f8>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800478c:	f001 fdca 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	e063      	b.n	800485c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479a:	f001 fdc3 	bl	8006324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	e05c      	b.n	800485c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f8fd 	bl	80059ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b6:	f001 fdb5 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ba:	f000 fe79 	bl	80054b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047be:	f001 fd81 	bl	80062c4 <vPortEnterCritical>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ce:	d103      	bne.n	80047d8 <xQueueGenericSend+0x16c>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSend+0x182>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ee:	f001 fd99 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f2:	1d3a      	adds	r2, r7, #4
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f8ec 	bl	80059d8 <xTaskCheckForTimeOut>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d124      	bne.n	8004850 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004808:	f000 fb2a 	bl	8004e60 <prvIsQueueFull>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	3310      	adds	r3, #16
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f840 	bl	80058a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004822:	f000 fab5 	bl	8004d90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f000 fe51 	bl	80054cc <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f af7c 	bne.w	800472a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <xQueueGenericSend+0x1f8>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	e772      	b.n	800472a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004846:	f000 faa3 	bl	8004d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484a:	f000 fe3f 	bl	80054cc <xTaskResumeAll>
 800484e:	e76c      	b.n	800472a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004852:	f000 fa9d 	bl	8004d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004856:	f000 fe39 	bl	80054cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800485a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800485c:	4618      	mov	r0, r3
 800485e:	3738      	adds	r7, #56	; 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xQueueReceive+0x30>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	623b      	str	r3, [r7, #32]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <xQueueReceive+0x3e>
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <xQueueReceive+0x42>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <xQueueReceive+0x44>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueReceive+0x5e>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048c6:	f001 f9b1 	bl	8005c2c <xTaskGetSchedulerState>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xQueueReceive+0x6e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <xQueueReceive+0x72>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueReceive+0x74>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueReceive+0x8e>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	61bb      	str	r3, [r7, #24]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f6:	f001 fce5 	bl	80062c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01f      	beq.n	8004946 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490a:	f000 fa1b 	bl	8004d44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f000 ffe0 	bl	80058e8 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <xQueueReceive+0x1bc>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493e:	f001 fcf1 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004942:	2301      	movs	r3, #1
 8004944:	e069      	b.n	8004a1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800494c:	f001 fcea 	bl	8006324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004950:	2300      	movs	r3, #0
 8004952:	e062      	b.n	8004a1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800495a:	f107 0310 	add.w	r3, r7, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f824 	bl	80059ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004968:	f001 fcdc 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496c:	f000 fda0 	bl	80054b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004970:	f001 fca8 	bl	80062c4 <vPortEnterCritical>
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497a:	b25b      	sxtb	r3, r3
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004980:	d103      	bne.n	800498a <xQueueReceive+0x122>
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004996:	d103      	bne.n	80049a0 <xQueueReceive+0x138>
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	f001 fcc0 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a4:	1d3a      	adds	r2, r7, #4
 80049a6:	f107 0310 	add.w	r3, r7, #16
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f813 	bl	80059d8 <xTaskCheckForTimeOut>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d123      	bne.n	8004a00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 fa3b 	bl	8004e34 <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 ff67 	bl	80058a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d4:	f000 f9dc 	bl	8004d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049d8:	f000 fd78 	bl	80054cc <xTaskResumeAll>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d189      	bne.n	80048f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <xQueueReceive+0x1bc>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e780      	b.n	80048f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f6:	f000 f9cb 	bl	8004d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fa:	f000 fd67 	bl	80054cc <xTaskResumeAll>
 80049fe:	e77a      	b.n	80048f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a02:	f000 f9c5 	bl	8004d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a06:	f000 fd61 	bl	80054cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0c:	f000 fa12 	bl	8004e34 <prvIsQueueEmpty>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f43f af6f 	beq.w	80048f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3730      	adds	r7, #48	; 0x30
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61fb      	str	r3, [r7, #28]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a78:	f001 f8d8 	bl	8005c2c <xTaskGetSchedulerState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xQueueSemaphoreTake+0x60>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <xQueueSemaphoreTake+0x64>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueSemaphoreTake+0x66>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	61bb      	str	r3, [r7, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aa8:	f001 fc0c 	bl	80062c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d024      	beq.n	8004b02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ac8:	f001 fa58 	bl	8005f7c <pvTaskIncrementMutexHeldCount>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00f      	beq.n	8004afa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	3310      	adds	r3, #16
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ff02 	bl	80058e8 <xTaskRemoveFromEventList>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aea:	4b54      	ldr	r3, [pc, #336]	; (8004c3c <xQueueSemaphoreTake+0x214>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004afa:	f001 fc13 	bl	8006324 <vPortExitCritical>
				return pdPASS;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e097      	b.n	8004c32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	617b      	str	r3, [r7, #20]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b24:	f001 fbfe 	bl	8006324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e082      	b.n	8004c32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 ff38 	bl	80059ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b40:	f001 fbf0 	bl	8006324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b44:	f000 fcb4 	bl	80054b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b48:	f001 fbbc 	bl	80062c4 <vPortEnterCritical>
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b52:	b25b      	sxtb	r3, r3
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b58:	d103      	bne.n	8004b62 <xQueueSemaphoreTake+0x13a>
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6e:	d103      	bne.n	8004b78 <xQueueSemaphoreTake+0x150>
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b78:	f001 fbd4 	bl	8006324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7c:	463a      	mov	r2, r7
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 ff27 	bl	80059d8 <xTaskCheckForTimeOut>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d132      	bne.n	8004bf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b92:	f000 f94f 	bl	8004e34 <prvIsQueueEmpty>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d026      	beq.n	8004bea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ba4:	f001 fb8e 	bl	80062c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 f85b 	bl	8005c68 <xTaskPriorityInherit>
 8004bb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bb4:	f001 fbb6 	bl	8006324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fe6d 	bl	80058a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bc8:	f000 f8e2 	bl	8004d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bcc:	f000 fc7e 	bl	80054cc <xTaskResumeAll>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f47f af68 	bne.w	8004aa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <xQueueSemaphoreTake+0x214>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	e75e      	b.n	8004aa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bec:	f000 f8d0 	bl	8004d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf0:	f000 fc6c 	bl	80054cc <xTaskResumeAll>
 8004bf4:	e758      	b.n	8004aa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf8:	f000 f8ca 	bl	8004d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bfc:	f000 fc66 	bl	80054cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c02:	f000 f917 	bl	8004e34 <prvIsQueueEmpty>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f43f af4d 	beq.w	8004aa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c14:	f001 fb56 	bl	80062c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c1a:	f000 f811 	bl	8004c40 <prvGetDisinheritPriorityAfterTimeout>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f91a 	bl	8005e60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c2c:	f001 fb7a 	bl	8006324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3738      	adds	r7, #56	; 0x38
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e001      	b.n	8004c62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c62:	68fb      	ldr	r3, [r7, #12]
	}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d14d      	bne.n	8004d32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 f85a 	bl	8005d54 <xTaskPriorityDisinherit>
 8004ca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	e043      	b.n	8004d32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d119      	bne.n	8004ce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6858      	ldr	r0, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	f002 f825 	bl	8006d0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	441a      	add	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d32b      	bcc.n	8004d32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e026      	b.n	8004d32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68d8      	ldr	r0, [r3, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	461a      	mov	r2, r3
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	f002 f80b 	bl	8006d0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	441a      	add	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d207      	bcs.n	8004d20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	425b      	negs	r3, r3
 8004d1a:	441a      	add	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d105      	bne.n	8004d32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d303      	bcc.n	8004d78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68d9      	ldr	r1, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	461a      	mov	r2, r3
 8004d82:	6838      	ldr	r0, [r7, #0]
 8004d84:	f001 ffc1 	bl	8006d0a <memcpy>
	}
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d98:	f001 fa94 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da4:	e011      	b.n	8004dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d012      	beq.n	8004dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3324      	adds	r3, #36	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fd98 	bl	80058e8 <xTaskRemoveFromEventList>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dbe:	f000 fe6d 	bl	8005a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	dce9      	bgt.n	8004da6 <prvUnlockQueue+0x16>
 8004dd2:	e000      	b.n	8004dd6 <prvUnlockQueue+0x46>
					break;
 8004dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dde:	f001 faa1 	bl	8006324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004de2:	f001 fa6f 	bl	80062c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dee:	e011      	b.n	8004e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd73 	bl	80058e8 <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e08:	f000 fe48 	bl	8005a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dce9      	bgt.n	8004df0 <prvUnlockQueue+0x60>
 8004e1c:	e000      	b.n	8004e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e28:	f001 fa7c 	bl	8006324 <vPortExitCritical>
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e3c:	f001 fa42 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e001      	b.n	8004e52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e52:	f001 fa67 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e68:	f001 fa2c 	bl	80062c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d102      	bne.n	8004e7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e001      	b.n	8004e82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e82:	f001 fa4f 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af04      	add	r7, sp, #16
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 faef 	bl	8006488 <pvPortMalloc>
 8004eaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004eb2:	20b4      	movs	r0, #180	; 0xb4
 8004eb4:	f001 fae8 	bl	8006488 <pvPortMalloc>
 8004eb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ec6:	e005      	b.n	8004ed4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ec8:	6978      	ldr	r0, [r7, #20]
 8004eca:	f001 fba9 	bl	8006620 <vPortFree>
 8004ece:	e001      	b.n	8004ed4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d013      	beq.n	8004f02 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f80f 	bl	8004f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ef6:	69f8      	ldr	r0, [r7, #28]
 8004ef8:	f000 f8aa 	bl	8005050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e002      	b.n	8004f08 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f08:	69bb      	ldr	r3, [r7, #24]
	}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01f      	beq.n	8004fa2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	e012      	b.n	8004f8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	7819      	ldrb	r1, [r3, #0]
 8004f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	3334      	adds	r3, #52	; 0x34
 8004f78:	460a      	mov	r2, r1
 8004f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2b0f      	cmp	r3, #15
 8004f92:	d9e9      	bls.n	8004f68 <prvInitialiseNewTask+0x54>
 8004f94:	e000      	b.n	8004f98 <prvInitialiseNewTask+0x84>
			{
				break;
 8004f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa0:	e003      	b.n	8004faa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d901      	bls.n	8004fb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff f998 	bl	8004300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f993 	bl	8004300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	f1c3 0207 	rsb	r2, r3, #7
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	334c      	adds	r3, #76	; 0x4c
 8005004:	2260      	movs	r2, #96	; 0x60
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fe8c 	bl	8006d26 <memset>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <prvInitialiseNewTask+0x130>)
 8005012:	651a      	str	r2, [r3, #80]	; 0x50
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <prvInitialiseNewTask+0x134>)
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	4a0b      	ldr	r2, [pc, #44]	; (800504c <prvInitialiseNewTask+0x138>)
 800501e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	69b8      	ldr	r0, [r7, #24]
 8005026:	f001 f823 	bl	8006070 <pxPortInitialiseStack>
 800502a:	4602      	mov	r2, r0
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503c:	bf00      	nop
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	08007e08 	.word	0x08007e08
 8005048:	08007e28 	.word	0x08007e28
 800504c:	08007de8 	.word	0x08007de8

08005050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005058:	f001 f934 	bl	80062c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800505c:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <prvAddNewTaskToReadyList+0xb8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	4a29      	ldr	r2, [pc, #164]	; (8005108 <prvAddNewTaskToReadyList+0xb8>)
 8005064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <prvAddNewTaskToReadyList+0xbc>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <prvAddNewTaskToReadyList+0xbc>)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <prvAddNewTaskToReadyList+0xb8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d110      	bne.n	800509e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800507c:	f000 fd32 	bl	8005ae4 <prvInitialiseTaskLists>
 8005080:	e00d      	b.n	800509e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <prvAddNewTaskToReadyList+0xc0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <prvAddNewTaskToReadyList+0xbc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	429a      	cmp	r2, r3
 8005096:	d802      	bhi.n	800509e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <prvAddNewTaskToReadyList+0xbc>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800509e:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <prvAddNewTaskToReadyList+0xc4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <prvAddNewTaskToReadyList+0xc4>)
 80050a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	4b19      	ldr	r3, [pc, #100]	; (8005118 <prvAddNewTaskToReadyList+0xc8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <prvAddNewTaskToReadyList+0xc8>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <prvAddNewTaskToReadyList+0xcc>)
 80050c8:	441a      	add	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7ff f922 	bl	800431a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 f925 	bl	8006324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <prvAddNewTaskToReadyList+0xc0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <prvAddNewTaskToReadyList+0xbc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d207      	bcs.n	8005100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <prvAddNewTaskToReadyList+0xd0>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000a00 	.word	0x20000a00
 800510c:	20000900 	.word	0x20000900
 8005110:	20000a0c 	.word	0x20000a0c
 8005114:	20000a1c 	.word	0x20000a1c
 8005118:	20000a08 	.word	0x20000a08
 800511c:	20000904 	.word	0x20000904
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	617b      	str	r3, [r7, #20]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <vTaskDelayUntil+0x46>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800516a:	4b2a      	ldr	r3, [pc, #168]	; (8005214 <vTaskDelayUntil+0xf0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <vTaskDelayUntil+0x64>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	60fb      	str	r3, [r7, #12]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005188:	f000 f992 	bl	80054b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <vTaskDelayUntil+0xf4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4413      	add	r3, r2
 800519a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20b      	bcs.n	80051be <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d211      	bcs.n	80051d4 <vTaskDelayUntil+0xb0>
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d90d      	bls.n	80051d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
 80051bc:	e00a      	b.n	80051d4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d303      	bcc.n	80051d0 <vTaskDelayUntil+0xac>
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d901      	bls.n	80051d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fedb 	bl	8005fa4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80051ee:	f000 f96d 	bl	80054cc <xTaskResumeAll>
 80051f2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d107      	bne.n	800520a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <vTaskDelayUntil+0xf8>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000a28 	.word	0x20000a28
 8005218:	20000a04 	.word	0x20000a04
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <vTaskDelay+0x60>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <vTaskDelay+0x30>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60bb      	str	r3, [r7, #8]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005250:	f000 f92e 	bl	80054b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005254:	2100      	movs	r1, #0
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fea4 	bl	8005fa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800525c:	f000 f936 	bl	80054cc <xTaskResumeAll>
 8005260:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <vTaskDelay+0x64>)
 800526a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000a28 	.word	0x20000a28
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8005290:	f001 f818 	bl	80062c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <uxTaskPriorityGet+0x18>
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <uxTaskPriorityGet+0x30>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	e000      	b.n	80052a2 <uxTaskPriorityGet+0x1a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80052aa:	f001 f83b 	bl	8006324 <vPortExitCritical>

		return uxReturn;
 80052ae:	68bb      	ldr	r3, [r7, #8]
	}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000900 	.word	0x20000900

080052bc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d90a      	bls.n	80052e6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60fb      	str	r3, [r7, #12]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b06      	cmp	r3, #6
 80052ea:	d901      	bls.n	80052f0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052ec:	2306      	movs	r3, #6
 80052ee:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80052f0:	f000 ffe8 	bl	80062c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <vTaskPrioritySet+0x44>
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <vTaskPrioritySet+0x144>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e000      	b.n	8005302 <vTaskPrioritySet+0x46>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d06f      	beq.n	80053f2 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90d      	bls.n	8005336 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <vTaskPrioritySet+0x144>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d00f      	beq.n	8005344 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <vTaskPrioritySet+0x144>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d309      	bcc.n	8005344 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e006      	b.n	8005344 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <vTaskPrioritySet+0x144>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	429a      	cmp	r2, r3
 800533e:	d101      	bne.n	8005344 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d102      	bne.n	800535c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	db04      	blt.n	8005374 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f1c3 0207 	rsb	r2, r3, #7
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6959      	ldr	r1, [r3, #20]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a20      	ldr	r2, [pc, #128]	; (8005404 <vTaskPrioritySet+0x148>)
 8005384:	4413      	add	r3, r2
 8005386:	4299      	cmp	r1, r3
 8005388:	d128      	bne.n	80053dc <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff f820 	bl	80043d4 <uxListRemove>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800539a:	2201      	movs	r2, #1
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43da      	mvns	r2, r3
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <vTaskPrioritySet+0x14c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4013      	ands	r3, r2
 80053aa:	4a17      	ldr	r2, [pc, #92]	; (8005408 <vTaskPrioritySet+0x14c>)
 80053ac:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	2201      	movs	r2, #1
 80053b4:	409a      	lsls	r2, r3
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <vTaskPrioritySet+0x14c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	4a12      	ldr	r2, [pc, #72]	; (8005408 <vTaskPrioritySet+0x14c>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <vTaskPrioritySet+0x148>)
 80053ce:	441a      	add	r2, r3
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7fe ff9f 	bl	800431a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <vTaskPrioritySet+0x150>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80053f2:	f000 ff97 	bl	8006324 <vPortExitCritical>
	}
 80053f6:	bf00      	nop
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000900 	.word	0x20000900
 8005404:	20000904 	.word	0x20000904
 8005408:	20000a08 	.word	0x20000a08
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005416:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <vTaskStartScheduler+0x80>)
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	2300      	movs	r3, #0
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	491c      	ldr	r1, [pc, #112]	; (8005494 <vTaskStartScheduler+0x84>)
 8005424:	481c      	ldr	r0, [pc, #112]	; (8005498 <vTaskStartScheduler+0x88>)
 8005426:	f7ff fd33 	bl	8004e90 <xTaskCreate>
 800542a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d11b      	bne.n	800546a <vTaskStartScheduler+0x5a>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <vTaskStartScheduler+0x8c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	334c      	adds	r3, #76	; 0x4c
 800544c:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <vTaskStartScheduler+0x90>)
 800544e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <vTaskStartScheduler+0x94>)
 8005452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <vTaskStartScheduler+0x98>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <vTaskStartScheduler+0x9c>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005464:	f000 fe8c 	bl	8006180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005468:	e00e      	b.n	8005488 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005470:	d10a      	bne.n	8005488 <vTaskStartScheduler+0x78>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vTaskStartScheduler+0x76>
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000a24 	.word	0x20000a24
 8005494:	08007d94 	.word	0x08007d94
 8005498:	08005ab5 	.word	0x08005ab5
 800549c:	20000900 	.word	0x20000900
 80054a0:	2000006c 	.word	0x2000006c
 80054a4:	20000a20 	.word	0x20000a20
 80054a8:	20000a0c 	.word	0x20000a0c
 80054ac:	20000a04 	.word	0x20000a04

080054b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <vTaskSuspendAll+0x18>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	4a03      	ldr	r2, [pc, #12]	; (80054c8 <vTaskSuspendAll+0x18>)
 80054bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054be:	bf00      	nop
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20000a28 	.word	0x20000a28

080054cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054da:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <xTaskResumeAll+0x114>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	603b      	str	r3, [r7, #0]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054f8:	f000 fee4 	bl	80062c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054fc:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <xTaskResumeAll+0x114>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3b01      	subs	r3, #1
 8005502:	4a37      	ldr	r2, [pc, #220]	; (80055e0 <xTaskResumeAll+0x114>)
 8005504:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <xTaskResumeAll+0x114>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d161      	bne.n	80055d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800550e:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <xTaskResumeAll+0x118>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05d      	beq.n	80055d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005516:	e02e      	b.n	8005576 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005518:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <xTaskResumeAll+0x11c>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3318      	adds	r3, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe ff55 	bl	80043d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe ff50 	bl	80043d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2201      	movs	r2, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <xTaskResumeAll+0x120>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <xTaskResumeAll+0x120>)
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <xTaskResumeAll+0x124>)
 8005554:	441a      	add	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7fe fedc 	bl	800431a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005566:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <xTaskResumeAll+0x128>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	429a      	cmp	r2, r3
 800556e:	d302      	bcc.n	8005576 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <xTaskResumeAll+0x12c>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005576:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <xTaskResumeAll+0x11c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1cc      	bne.n	8005518 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005584:	f000 fb32 	bl	8005bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005588:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <xTaskResumeAll+0x130>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005594:	f000 f86a 	bl	800566c <xTaskIncrementTick>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <xTaskResumeAll+0x12c>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f1      	bne.n	8005594 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <xTaskResumeAll+0x130>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <xTaskResumeAll+0x12c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055be:	2301      	movs	r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <xTaskResumeAll+0x134>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055d2:	f000 fea7 	bl	8006324 <vPortExitCritical>

	return xAlreadyYielded;
 80055d6:	68bb      	ldr	r3, [r7, #8]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000a28 	.word	0x20000a28
 80055e4:	20000a00 	.word	0x20000a00
 80055e8:	200009c0 	.word	0x200009c0
 80055ec:	20000a08 	.word	0x20000a08
 80055f0:	20000904 	.word	0x20000904
 80055f4:	20000900 	.word	0x20000900
 80055f8:	20000a14 	.word	0x20000a14
 80055fc:	20000a10 	.word	0x20000a10
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <xTaskGetTickCount+0x1c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000a04 	.word	0x20000a04

08005624 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <pcTaskGetName+0x14>
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <pcTaskGetName+0x44>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	e000      	b.n	800563a <pcTaskGetName+0x16>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <pcTaskGetName+0x34>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60bb      	str	r3, [r7, #8]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3334      	adds	r3, #52	; 0x34
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000900 	.word	0x20000900

0800566c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b4e      	ldr	r3, [pc, #312]	; (80057b0 <xTaskIncrementTick+0x144>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 808e 	bne.w	800579c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005680:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <xTaskIncrementTick+0x148>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005688:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <xTaskIncrementTick+0x148>)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d120      	bne.n	80056d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005694:	4b48      	ldr	r3, [pc, #288]	; (80057b8 <xTaskIncrementTick+0x14c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	603b      	str	r3, [r7, #0]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xTaskIncrementTick+0x46>
 80056b4:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a3e      	ldr	r2, [pc, #248]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4a3e      	ldr	r2, [pc, #248]	; (80057bc <xTaskIncrementTick+0x150>)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a3c      	ldr	r2, [pc, #240]	; (80057c0 <xTaskIncrementTick+0x154>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	f000 fa8b 	bl	8005bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d6:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <xTaskIncrementTick+0x158>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d348      	bcc.n	8005772 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <xTaskIncrementTick+0x158>)
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056f0:	601a      	str	r2, [r3, #0]
					break;
 80056f2:	e03e      	b.n	8005772 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f4:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d203      	bcs.n	8005714 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <xTaskIncrementTick+0x158>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005712:	e02e      	b.n	8005772 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fe5b 	bl	80043d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fe52 	bl	80043d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <xTaskIncrementTick+0x15c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <xTaskIncrementTick+0x15c>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <xTaskIncrementTick+0x160>)
 8005750:	441a      	add	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fe fdde 	bl	800431a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <xTaskIncrementTick+0x164>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d3b9      	bcc.n	80056e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	e7b6      	b.n	80056e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <xTaskIncrementTick+0x164>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4914      	ldr	r1, [pc, #80]	; (80057cc <xTaskIncrementTick+0x160>)
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d901      	bls.n	800578e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <xTaskIncrementTick+0x168>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e004      	b.n	80057a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <xTaskIncrementTick+0x16c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <xTaskIncrementTick+0x16c>)
 80057a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000a28 	.word	0x20000a28
 80057b4:	20000a04 	.word	0x20000a04
 80057b8:	200009b8 	.word	0x200009b8
 80057bc:	200009bc 	.word	0x200009bc
 80057c0:	20000a18 	.word	0x20000a18
 80057c4:	20000a20 	.word	0x20000a20
 80057c8:	20000a08 	.word	0x20000a08
 80057cc:	20000904 	.word	0x20000904
 80057d0:	20000900 	.word	0x20000900
 80057d4:	20000a14 	.word	0x20000a14
 80057d8:	20000a10 	.word	0x20000a10

080057dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e2:	4b29      	ldr	r3, [pc, #164]	; (8005888 <vTaskSwitchContext+0xac>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ea:	4b28      	ldr	r3, [pc, #160]	; (800588c <vTaskSwitchContext+0xb0>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f0:	e044      	b.n	800587c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <vTaskSwitchContext+0xb0>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <vTaskSwitchContext+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	f1c3 031f 	rsb	r3, r3, #31
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	4921      	ldr	r1, [pc, #132]	; (8005894 <vTaskSwitchContext+0xb8>)
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vTaskSwitchContext+0x5a>
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <vTaskSwitchContext+0xb8>)
 8005844:	4413      	add	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3308      	adds	r3, #8
 800585a:	429a      	cmp	r2, r3
 800585c:	d104      	bne.n	8005868 <vTaskSwitchContext+0x8c>
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <vTaskSwitchContext+0xbc>)
 8005870:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <vTaskSwitchContext+0xbc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	334c      	adds	r3, #76	; 0x4c
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <vTaskSwitchContext+0xc0>)
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	20000a28 	.word	0x20000a28
 800588c:	20000a14 	.word	0x20000a14
 8005890:	20000a08 	.word	0x20000a08
 8005894:	20000904 	.word	0x20000904
 8005898:	20000900 	.word	0x20000900
 800589c:	2000006c 	.word	0x2000006c

080058a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60fb      	str	r3, [r7, #12]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <vTaskPlaceOnEventList+0x44>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3318      	adds	r3, #24
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fe fd47 	bl	8004362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058d4:	2101      	movs	r1, #1
 80058d6:	6838      	ldr	r0, [r7, #0]
 80058d8:	f000 fb64 	bl	8005fa4 <prvAddCurrentTaskToDelayedList>
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000900 	.word	0x20000900

080058e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60fb      	str	r3, [r7, #12]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3318      	adds	r3, #24
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fd5b 	bl	80043d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <xTaskRemoveFromEventList+0xac>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11c      	bne.n	8005960 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3304      	adds	r3, #4
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fd52 	bl	80043d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	2201      	movs	r2, #1
 8005936:	409a      	lsls	r2, r3
 8005938:	4b17      	ldr	r3, [pc, #92]	; (8005998 <xTaskRemoveFromEventList+0xb0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4313      	orrs	r3, r2
 800593e:	4a16      	ldr	r2, [pc, #88]	; (8005998 <xTaskRemoveFromEventList+0xb0>)
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <xTaskRemoveFromEventList+0xb4>)
 8005950:	441a      	add	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7fe fcde 	bl	800431a <vListInsertEnd>
 800595e:	e005      	b.n	800596c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3318      	adds	r3, #24
 8005964:	4619      	mov	r1, r3
 8005966:	480e      	ldr	r0, [pc, #56]	; (80059a0 <xTaskRemoveFromEventList+0xb8>)
 8005968:	f7fe fcd7 	bl	800431a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <xTaskRemoveFromEventList+0xbc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d905      	bls.n	8005986 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800597a:	2301      	movs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <xTaskRemoveFromEventList+0xc0>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e001      	b.n	800598a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800598a:	697b      	ldr	r3, [r7, #20]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000a28 	.word	0x20000a28
 8005998:	20000a08 	.word	0x20000a08
 800599c:	20000904 	.word	0x20000904
 80059a0:	200009c0 	.word	0x200009c0
 80059a4:	20000900 	.word	0x20000900
 80059a8:	20000a14 	.word	0x20000a14

080059ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <vTaskInternalSetTimeOutState+0x24>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <vTaskInternalSetTimeOutState+0x28>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	605a      	str	r2, [r3, #4]
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000a18 	.word	0x20000a18
 80059d4:	20000a04 	.word	0x20000a04

080059d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	613b      	str	r3, [r7, #16]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a1a:	f000 fc53 	bl	80062c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <xTaskCheckForTimeOut+0xbc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a36:	d102      	bne.n	8005a3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e023      	b.n	8005a86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <xTaskCheckForTimeOut+0xc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d007      	beq.n	8005a5a <xTaskCheckForTimeOut+0x82>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e015      	b.n	8005a86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d20b      	bcs.n	8005a7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ff9b 	bl	80059ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e004      	b.n	8005a86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a86:	f000 fc4d 	bl	8006324 <vPortExitCritical>

	return xReturn;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000a04 	.word	0x20000a04
 8005a98:	20000a18 	.word	0x20000a18

08005a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <vTaskMissedYield+0x14>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000a14 	.word	0x20000a14

08005ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005abc:	f000 f852 	bl	8005b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <prvIdleTask+0x28>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d9f9      	bls.n	8005abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <prvIdleTask+0x2c>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ad8:	e7f0      	b.n	8005abc <prvIdleTask+0x8>
 8005ada:	bf00      	nop
 8005adc:	20000904 	.word	0x20000904
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	e00c      	b.n	8005b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <prvInitialiseTaskLists+0x60>)
 8005afc:	4413      	add	r3, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fbde 	bl	80042c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3301      	adds	r3, #1
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d9ef      	bls.n	8005af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b10:	480d      	ldr	r0, [pc, #52]	; (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b12:	f7fe fbd5 	bl	80042c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b16:	480d      	ldr	r0, [pc, #52]	; (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b18:	f7fe fbd2 	bl	80042c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <prvInitialiseTaskLists+0x6c>)
 8005b1e:	f7fe fbcf 	bl	80042c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b22:	480c      	ldr	r0, [pc, #48]	; (8005b54 <prvInitialiseTaskLists+0x70>)
 8005b24:	f7fe fbcc 	bl	80042c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b28:	480b      	ldr	r0, [pc, #44]	; (8005b58 <prvInitialiseTaskLists+0x74>)
 8005b2a:	f7fe fbc9 	bl	80042c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <prvInitialiseTaskLists+0x78>)
 8005b30:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <prvInitialiseTaskLists+0x7c>)
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000904 	.word	0x20000904
 8005b48:	20000990 	.word	0x20000990
 8005b4c:	200009a4 	.word	0x200009a4
 8005b50:	200009c0 	.word	0x200009c0
 8005b54:	200009d4 	.word	0x200009d4
 8005b58:	200009ec 	.word	0x200009ec
 8005b5c:	200009b8 	.word	0x200009b8
 8005b60:	200009bc 	.word	0x200009bc

08005b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b6a:	e019      	b.n	8005ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b6c:	f000 fbaa 	bl	80062c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <prvCheckTasksWaitingTermination+0x50>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fc29 	bl	80043d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b96:	f000 fbc5 	bl	8006324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f810 	bl	8005bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e1      	bne.n	8005b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200009d4 	.word	0x200009d4
 8005bb8:	20000a00 	.word	0x20000a00
 8005bbc:	200009e8 	.word	0x200009e8

08005bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	334c      	adds	r3, #76	; 0x4c
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f9b9 	bl	8006f44 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fd22 	bl	8006620 <vPortFree>
			vPortFree( pxTCB );
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fd1f 	bl	8006620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <prvResetNextTaskUnblockTime+0x38>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <prvResetNextTaskUnblockTime+0x3c>)
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c04:	e008      	b.n	8005c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <prvResetNextTaskUnblockTime+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <prvResetNextTaskUnblockTime+0x3c>)
 8005c16:	6013      	str	r3, [r2, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	200009b8 	.word	0x200009b8
 8005c28:	20000a20 	.word	0x20000a20

08005c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <xTaskGetSchedulerState+0x34>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e008      	b.n	8005c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <xTaskGetSchedulerState+0x38>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e001      	b.n	8005c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c52:	687b      	ldr	r3, [r7, #4]
	}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000a0c 	.word	0x20000a0c
 8005c64:	20000a28 	.word	0x20000a28

08005c68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d05e      	beq.n	8005d3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d24e      	bcs.n	8005d2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db06      	blt.n	8005ca2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c94:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f1c3 0207 	rsb	r2, r3, #7
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <xTaskPriorityInherit+0xe4>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d12f      	bne.n	8005d1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fb88 	bl	80043d4 <uxListRemove>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	2201      	movs	r2, #1
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <xTaskPriorityInherit+0xe4>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe fb01 	bl	800431a <vListInsertEnd>
 8005d18:	e004      	b.n	8005d24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e008      	b.n	8005d3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d201      	bcs.n	8005d3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000900 	.word	0x20000900
 8005d4c:	20000904 	.word	0x20000904
 8005d50:	20000a08 	.word	0x20000a08

08005d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d06e      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <xTaskPriorityDisinherit+0x100>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d00a      	beq.n	8005d8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60fb      	str	r3, [r7, #12]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d044      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d140      	bne.n	8005e48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fb02 	bl	80043d4 <uxListRemove>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d115      	bne.n	8005e02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	491f      	ldr	r1, [pc, #124]	; (8005e58 <xTaskPriorityDisinherit+0x104>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xTaskPriorityDisinherit+0xae>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f1c3 0207 	rsb	r2, r3, #7
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <xTaskPriorityDisinherit+0x104>)
 8005e36:	441a      	add	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fe fa6b 	bl	800431a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000900 	.word	0x20000900
 8005e58:	20000904 	.word	0x20000904
 8005e5c:	20000a08 	.word	0x20000a08

08005e60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d077      	beq.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d902      	bls.n	8005ea6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e002      	b.n	8005eac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d058      	beq.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d153      	bne.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d10a      	bne.n	8005ee0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	60bb      	str	r3, [r7, #8]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db04      	blt.n	8005efe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f1c3 0207 	rsb	r2, r3, #7
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6959      	ldr	r1, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	4299      	cmp	r1, r3
 8005f12:	d129      	bne.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fa5b 	bl	80043d4 <uxListRemove>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2201      	movs	r2, #1
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4013      	ands	r3, r2
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	409a      	lsls	r2, r3
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fe f9d9 	bl	800431a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f68:	bf00      	nop
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000900 	.word	0x20000900
 8005f74:	20000904 	.word	0x20000904
 8005f78:	20000a08 	.word	0x20000a08

08005f7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f8e:	3201      	adds	r2, #1
 8005f90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005f92:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f94:	681b      	ldr	r3, [r3, #0]
	}
 8005f96:	4618      	mov	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000900 	.word	0x20000900

08005fa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fa0a 	bl	80043d4 <uxListRemove>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10b      	bne.n	8005fde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	4b21      	ldr	r3, [pc, #132]	; (800605c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	4a20      	ldr	r2, [pc, #128]	; (800605c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d10a      	bne.n	8005ffc <prvAddCurrentTaskToDelayedList+0x58>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fec:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	481a      	ldr	r0, [pc, #104]	; (8006060 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ff6:	f7fe f990 	bl	800431a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ffa:	e026      	b.n	800604a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006004:	4b14      	ldr	r3, [pc, #80]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d209      	bcs.n	8006028 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3304      	adds	r3, #4
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f7fe f99e 	bl	8004362 <vListInsert>
}
 8006026:	e010      	b.n	800604a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <prvAddCurrentTaskToDelayedList+0xc4>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe f994 	bl	8004362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <prvAddCurrentTaskToDelayedList+0xc8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d202      	bcs.n	800604a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006044:	4a09      	ldr	r2, [pc, #36]	; (800606c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6013      	str	r3, [r2, #0]
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000a04 	.word	0x20000a04
 8006058:	20000900 	.word	0x20000900
 800605c:	20000a08 	.word	0x20000a08
 8006060:	200009ec 	.word	0x200009ec
 8006064:	200009bc 	.word	0x200009bc
 8006068:	200009b8 	.word	0x200009b8
 800606c:	20000a20 	.word	0x20000a20

08006070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3b04      	subs	r3, #4
 8006080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b04      	subs	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b04      	subs	r3, #4
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060a0:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <pxPortInitialiseStack+0x64>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b14      	subs	r3, #20
 80060aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b04      	subs	r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f06f 0202 	mvn.w	r2, #2
 80060be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3b20      	subs	r3, #32
 80060c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	080060d9 	.word	0x080060d9

080060d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <prvTaskExitError+0x54>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ea:	d00a      	beq.n	8006102 <prvTaskExitError+0x2a>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <prvTaskExitError+0x28>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60bb      	str	r3, [r7, #8]
}
 8006114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006116:	bf00      	nop
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0fc      	beq.n	8006118 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20000068 	.word	0x20000068

08006130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <pxCurrentTCBConst2>)
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f380 8809 	msr	PSP, r0
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	4770      	bx	lr
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst2>:
 8006150:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006158:	4808      	ldr	r0, [pc, #32]	; (800617c <prvPortStartFirstTask+0x24>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f380 8808 	msr	MSP, r0
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8814 	msr	CONTROL, r0
 800616a:	b662      	cpsie	i
 800616c:	b661      	cpsie	f
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	df00      	svc	0
 8006178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800617a:	bf00      	nop
 800617c:	e000ed08 	.word	0xe000ed08

08006180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <xPortStartScheduler+0x120>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a46      	ldr	r2, [pc, #280]	; (80062a4 <xPortStartScheduler+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10a      	bne.n	80061a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <xPortStartScheduler+0x120>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3f      	ldr	r2, [pc, #252]	; (80062a8 <xPortStartScheduler+0x128>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10a      	bne.n	80061c6 <xPortStartScheduler+0x46>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60fb      	str	r3, [r7, #12]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <xPortStartScheduler+0x12c>)
 80061c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <xPortStartScheduler+0x130>)
 80061ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f0:	2207      	movs	r2, #7
 80061f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f4:	e009      	b.n	800620a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <xPortStartScheduler+0x134>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <xPortStartScheduler+0x134>)
 80061fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d0ef      	beq.n	80061f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006216:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <xPortStartScheduler+0x134>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00a      	beq.n	8006238 <xPortStartScheduler+0xb8>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <xPortStartScheduler+0x134>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <xPortStartScheduler+0x134>)
 8006240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <xPortStartScheduler+0x134>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <xPortStartScheduler+0x134>)
 800624c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006256:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <xPortStartScheduler+0x138>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <xPortStartScheduler+0x138>)
 800625c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <xPortStartScheduler+0x138>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <xPortStartScheduler+0x138>)
 8006268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800626c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800626e:	f000 f8dd 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <xPortStartScheduler+0x13c>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006278:	f000 f8fc 	bl	8006474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <xPortStartScheduler+0x140>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <xPortStartScheduler+0x140>)
 8006282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006288:	f7ff ff66 	bl	8006158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800628c:	f7ff faa6 	bl	80057dc <vTaskSwitchContext>
	prvTaskExitError();
 8006290:	f7ff ff22 	bl	80060d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed00 	.word	0xe000ed00
 80062a4:	410fc271 	.word	0x410fc271
 80062a8:	410fc270 	.word	0x410fc270
 80062ac:	e000e400 	.word	0xe000e400
 80062b0:	20000a2c 	.word	0x20000a2c
 80062b4:	20000a30 	.word	0x20000a30
 80062b8:	e000ed20 	.word	0xe000ed20
 80062bc:	20000068 	.word	0x20000068
 80062c0:	e000ef34 	.word	0xe000ef34

080062c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	607b      	str	r3, [r7, #4]
}
 80062dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <vPortEnterCritical+0x58>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <vPortEnterCritical+0x58>)
 80062e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <vPortEnterCritical+0x58>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10f      	bne.n	8006310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <vPortEnterCritical+0x5c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <vPortEnterCritical+0x4c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	603b      	str	r3, [r7, #0]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <vPortEnterCritical+0x4a>
	}
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	20000068 	.word	0x20000068
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <vPortExitCritical+0x50>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <vPortExitCritical+0x24>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortExitCritical+0x50>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <vPortExitCritical+0x50>)
 8006350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <vPortExitCritical+0x42>
 800635a:	2300      	movs	r3, #0
 800635c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000068 	.word	0x20000068
	...

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f7ff fa14 	bl	80057dc <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7ff f933 	bl	800566c <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <SysTick_Handler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <vPortSetupTimerInterrupt+0x38>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <vPortSetupTimerInterrupt+0x3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <vPortSetupTimerInterrupt+0x40>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <vPortSetupTimerInterrupt+0x44>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010
 8006464:	e000e018 	.word	0xe000e018
 8006468:	2000005c 	.word	0x2000005c
 800646c:	10624dd3 	.word	0x10624dd3
 8006470:	e000e014 	.word	0xe000e014

08006474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006484 <vPortEnableVFP+0x10>
 8006478:	6801      	ldr	r1, [r0, #0]
 800647a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800647e:	6001      	str	r1, [r0, #0]
 8006480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006482:	bf00      	nop
 8006484:	e000ed88 	.word	0xe000ed88

08006488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006494:	f7ff f80c 	bl	80054b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006498:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <pvPortMalloc+0x180>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064a0:	f000 f920 	bl	80066e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064a4:	4b59      	ldr	r3, [pc, #356]	; (800660c <pvPortMalloc+0x184>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 8093 	bne.w	80065d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01d      	beq.n	80064f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064b8:	2208      	movs	r2, #8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d014      	beq.n	80064f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	3308      	adds	r3, #8
 80064d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <pvPortMalloc+0x6c>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	617b      	str	r3, [r7, #20]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d06e      	beq.n	80065d8 <pvPortMalloc+0x150>
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <pvPortMalloc+0x188>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d869      	bhi.n	80065d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006504:	4b43      	ldr	r3, [pc, #268]	; (8006614 <pvPortMalloc+0x18c>)
 8006506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006508:	4b42      	ldr	r3, [pc, #264]	; (8006614 <pvPortMalloc+0x18c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800650e:	e004      	b.n	800651a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d903      	bls.n	800652c <pvPortMalloc+0xa4>
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f1      	bne.n	8006510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800652c:	4b36      	ldr	r3, [pc, #216]	; (8006608 <pvPortMalloc+0x180>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	429a      	cmp	r2, r3
 8006534:	d050      	beq.n	80065d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2208      	movs	r2, #8
 800653c:	4413      	add	r3, r2
 800653e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	2308      	movs	r3, #8
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	429a      	cmp	r2, r3
 8006556:	d91f      	bls.n	8006598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <pvPortMalloc+0xf8>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	613b      	str	r3, [r7, #16]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006592:	69b8      	ldr	r0, [r7, #24]
 8006594:	f000 f908 	bl	80067a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <pvPortMalloc+0x188>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <pvPortMalloc+0x188>)
 80065a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <pvPortMalloc+0x188>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <pvPortMalloc+0x190>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d203      	bcs.n	80065ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065b2:	4b17      	ldr	r3, [pc, #92]	; (8006610 <pvPortMalloc+0x188>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <pvPortMalloc+0x190>)
 80065b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <pvPortMalloc+0x184>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <pvPortMalloc+0x194>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a11      	ldr	r2, [pc, #68]	; (800661c <pvPortMalloc+0x194>)
 80065d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065d8:	f7fe ff78 	bl	80054cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <pvPortMalloc+0x174>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60fb      	str	r3, [r7, #12]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <pvPortMalloc+0x172>
	return pvReturn;
 80065fc:	69fb      	ldr	r3, [r7, #28]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000463c 	.word	0x2000463c
 800660c:	20004650 	.word	0x20004650
 8006610:	20004640 	.word	0x20004640
 8006614:	20004634 	.word	0x20004634
 8006618:	20004644 	.word	0x20004644
 800661c:	20004648 	.word	0x20004648

08006620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04d      	beq.n	80066ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006632:	2308      	movs	r3, #8
 8006634:	425b      	negs	r3, r3
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4413      	add	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <vPortFree+0xb8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4013      	ands	r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <vPortFree+0x44>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60fb      	str	r3, [r7, #12]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <vPortFree+0x62>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60bb      	str	r3, [r7, #8]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <vPortFree+0xb8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01e      	beq.n	80066ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11a      	bne.n	80066ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <vPortFree+0xb8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	401a      	ands	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066a8:	f7fe ff02 	bl	80054b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <vPortFree+0xbc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <vPortFree+0xbc>)
 80066b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f000 f874 	bl	80067a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <vPortFree+0xc0>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a06      	ldr	r2, [pc, #24]	; (80066e0 <vPortFree+0xc0>)
 80066c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066ca:	f7fe feff 	bl	80054cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20004650 	.word	0x20004650
 80066dc:	20004640 	.word	0x20004640
 80066e0:	2000464c 	.word	0x2000464c

080066e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066f0:	4b27      	ldr	r3, [pc, #156]	; (8006790 <prvHeapInit+0xac>)
 80066f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <prvHeapInit+0xac>)
 8006714:	4413      	add	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800671c:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <prvHeapInit+0xb0>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006722:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <prvHeapInit+0xb0>)
 8006724:	2200      	movs	r2, #0
 8006726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006730:	2208      	movs	r2, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <prvHeapInit+0xb4>)
 8006744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <prvHeapInit+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <prvHeapInit+0xb4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <prvHeapInit+0xb4>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <prvHeapInit+0xb8>)
 8006772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <prvHeapInit+0xbc>)
 800677a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <prvHeapInit+0xc0>)
 800677e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20000a34 	.word	0x20000a34
 8006794:	20004634 	.word	0x20004634
 8006798:	2000463c 	.word	0x2000463c
 800679c:	20004644 	.word	0x20004644
 80067a0:	20004640 	.word	0x20004640
 80067a4:	20004650 	.word	0x20004650

080067a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <prvInsertBlockIntoFreeList+0xac>)
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e002      	b.n	80067bc <prvInsertBlockIntoFreeList+0x14>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d8f7      	bhi.n	80067b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d108      	bne.n	80067ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	441a      	add	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d118      	bne.n	8006830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <prvInsertBlockIntoFreeList+0xb0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d00d      	beq.n	8006826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	441a      	add	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e008      	b.n	8006838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <prvInsertBlockIntoFreeList+0xb0>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e003      	b.n	8006838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d002      	beq.n	8006846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20004634 	.word	0x20004634
 8006858:	2000463c 	.word	0x2000463c

0800685c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8006864:	1d39      	adds	r1, r7, #4
 8006866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800686a:	2201      	movs	r2, #1
 800686c:	4803      	ldr	r0, [pc, #12]	; (800687c <__io_putchar+0x20>)
 800686e:	f7fc fe56 	bl	800351e <HAL_UART_Transmit>

	return ch;
 8006872:	687b      	ldr	r3, [r7, #4]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000354 	.word	0x20000354

08006880 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8006888:	f7ff fd1c 	bl	80062c4 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4807      	ldr	r0, [pc, #28]	; (80068ac <vPrintString+0x2c>)
 8006890:	f000 fb32 	bl	8006ef8 <iprintf>
		fflush( stdout );
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <vPrintString+0x30>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f906 	bl	8006aac <fflush>
	}
	taskEXIT_CRITICAL();
 80068a0:	f7ff fd40 	bl	8006324 <vPortExitCritical>
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	08007d9c 	.word	0x08007d9c
 80068b0:	2000006c 	.word	0x2000006c

080068b4 <vPrintStringAndNumber>:
/*-----------------------------------------------------------*/

void vPrintStringAndNumber( const char *pcString, uint32_t ulValue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 80068be:	f7ff fd01 	bl	80062c4 <vPortEnterCritical>
	{
		printf( "%s %lu\r\n", pcString, ulValue );
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4807      	ldr	r0, [pc, #28]	; (80068e4 <vPrintStringAndNumber+0x30>)
 80068c8:	f000 fb16 	bl	8006ef8 <iprintf>
		fflush( stdout );
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <vPrintStringAndNumber+0x34>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 f8ea 	bl	8006aac <fflush>
	}
	taskEXIT_CRITICAL();
 80068d8:	f7ff fd24 	bl	8006324 <vPortExitCritical>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	08007da0 	.word	0x08007da0
 80068e8:	2000006c 	.word	0x2000006c

080068ec <vPrintTwoStrings>:
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	vTaskSuspendAll();
 80068f6:	f7fe fddb 	bl	80054b0 <vTaskSuspendAll>
	{
		printf( "At time %lu: %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 80068fa:	f7fe fe83 	bl	8005604 <xTaskGetTickCount>
 80068fe:	4601      	mov	r1, r0
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4804      	ldr	r0, [pc, #16]	; (8006918 <vPrintTwoStrings+0x2c>)
 8006906:	f000 faf7 	bl	8006ef8 <iprintf>
	}
	xTaskResumeAll();
 800690a:	f7fe fddf 	bl	80054cc <xTaskResumeAll>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08007dac 	.word	0x08007dac

0800691c <__errno>:
 800691c:	4b01      	ldr	r3, [pc, #4]	; (8006924 <__errno+0x8>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000006c 	.word	0x2000006c

08006928 <__sflush_r>:
 8006928:	898a      	ldrh	r2, [r1, #12]
 800692a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692e:	4605      	mov	r5, r0
 8006930:	0710      	lsls	r0, r2, #28
 8006932:	460c      	mov	r4, r1
 8006934:	d458      	bmi.n	80069e8 <__sflush_r+0xc0>
 8006936:	684b      	ldr	r3, [r1, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dc05      	bgt.n	8006948 <__sflush_r+0x20>
 800693c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	dc02      	bgt.n	8006948 <__sflush_r+0x20>
 8006942:	2000      	movs	r0, #0
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800694a:	2e00      	cmp	r6, #0
 800694c:	d0f9      	beq.n	8006942 <__sflush_r+0x1a>
 800694e:	2300      	movs	r3, #0
 8006950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006954:	682f      	ldr	r7, [r5, #0]
 8006956:	602b      	str	r3, [r5, #0]
 8006958:	d032      	beq.n	80069c0 <__sflush_r+0x98>
 800695a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	075a      	lsls	r2, r3, #29
 8006960:	d505      	bpl.n	800696e <__sflush_r+0x46>
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	1ac0      	subs	r0, r0, r3
 8006966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006968:	b10b      	cbz	r3, 800696e <__sflush_r+0x46>
 800696a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800696c:	1ac0      	subs	r0, r0, r3
 800696e:	2300      	movs	r3, #0
 8006970:	4602      	mov	r2, r0
 8006972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006974:	6a21      	ldr	r1, [r4, #32]
 8006976:	4628      	mov	r0, r5
 8006978:	47b0      	blx	r6
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	d106      	bne.n	800698e <__sflush_r+0x66>
 8006980:	6829      	ldr	r1, [r5, #0]
 8006982:	291d      	cmp	r1, #29
 8006984:	d82c      	bhi.n	80069e0 <__sflush_r+0xb8>
 8006986:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <__sflush_r+0x108>)
 8006988:	40ca      	lsrs	r2, r1
 800698a:	07d6      	lsls	r6, r2, #31
 800698c:	d528      	bpl.n	80069e0 <__sflush_r+0xb8>
 800698e:	2200      	movs	r2, #0
 8006990:	6062      	str	r2, [r4, #4]
 8006992:	04d9      	lsls	r1, r3, #19
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	6022      	str	r2, [r4, #0]
 8006998:	d504      	bpl.n	80069a4 <__sflush_r+0x7c>
 800699a:	1c42      	adds	r2, r0, #1
 800699c:	d101      	bne.n	80069a2 <__sflush_r+0x7a>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	b903      	cbnz	r3, 80069a4 <__sflush_r+0x7c>
 80069a2:	6560      	str	r0, [r4, #84]	; 0x54
 80069a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069a6:	602f      	str	r7, [r5, #0]
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d0ca      	beq.n	8006942 <__sflush_r+0x1a>
 80069ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <__sflush_r+0x92>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f9bf 	bl	8006d38 <_free_r>
 80069ba:	2000      	movs	r0, #0
 80069bc:	6360      	str	r0, [r4, #52]	; 0x34
 80069be:	e7c1      	b.n	8006944 <__sflush_r+0x1c>
 80069c0:	6a21      	ldr	r1, [r4, #32]
 80069c2:	2301      	movs	r3, #1
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b0      	blx	r6
 80069c8:	1c41      	adds	r1, r0, #1
 80069ca:	d1c7      	bne.n	800695c <__sflush_r+0x34>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0c4      	beq.n	800695c <__sflush_r+0x34>
 80069d2:	2b1d      	cmp	r3, #29
 80069d4:	d001      	beq.n	80069da <__sflush_r+0xb2>
 80069d6:	2b16      	cmp	r3, #22
 80069d8:	d101      	bne.n	80069de <__sflush_r+0xb6>
 80069da:	602f      	str	r7, [r5, #0]
 80069dc:	e7b1      	b.n	8006942 <__sflush_r+0x1a>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	e7ad      	b.n	8006944 <__sflush_r+0x1c>
 80069e8:	690f      	ldr	r7, [r1, #16]
 80069ea:	2f00      	cmp	r7, #0
 80069ec:	d0a9      	beq.n	8006942 <__sflush_r+0x1a>
 80069ee:	0793      	lsls	r3, r2, #30
 80069f0:	680e      	ldr	r6, [r1, #0]
 80069f2:	bf08      	it	eq
 80069f4:	694b      	ldreq	r3, [r1, #20]
 80069f6:	600f      	str	r7, [r1, #0]
 80069f8:	bf18      	it	ne
 80069fa:	2300      	movne	r3, #0
 80069fc:	eba6 0807 	sub.w	r8, r6, r7
 8006a00:	608b      	str	r3, [r1, #8]
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	dd9c      	ble.n	8006942 <__sflush_r+0x1a>
 8006a08:	6a21      	ldr	r1, [r4, #32]
 8006a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	463a      	mov	r2, r7
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b0      	blx	r6
 8006a14:	2800      	cmp	r0, #0
 8006a16:	dc06      	bgt.n	8006a26 <__sflush_r+0xfe>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a24:	e78e      	b.n	8006944 <__sflush_r+0x1c>
 8006a26:	4407      	add	r7, r0
 8006a28:	eba8 0800 	sub.w	r8, r8, r0
 8006a2c:	e7e9      	b.n	8006a02 <__sflush_r+0xda>
 8006a2e:	bf00      	nop
 8006a30:	20400001 	.word	0x20400001

08006a34 <_fflush_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	690b      	ldr	r3, [r1, #16]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b913      	cbnz	r3, 8006a44 <_fflush_r+0x10>
 8006a3e:	2500      	movs	r5, #0
 8006a40:	4628      	mov	r0, r5
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	b118      	cbz	r0, 8006a4e <_fflush_r+0x1a>
 8006a46:	6983      	ldr	r3, [r0, #24]
 8006a48:	b90b      	cbnz	r3, 8006a4e <_fflush_r+0x1a>
 8006a4a:	f000 f899 	bl	8006b80 <__sinit>
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <_fflush_r+0x6c>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	d11b      	bne.n	8006a8c <_fflush_r+0x58>
 8006a54:	686c      	ldr	r4, [r5, #4]
 8006a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0ef      	beq.n	8006a3e <_fflush_r+0xa>
 8006a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d404      	bmi.n	8006a6e <_fflush_r+0x3a>
 8006a64:	0599      	lsls	r1, r3, #22
 8006a66:	d402      	bmi.n	8006a6e <_fflush_r+0x3a>
 8006a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a6a:	f000 f94c 	bl	8006d06 <__retarget_lock_acquire_recursive>
 8006a6e:	4628      	mov	r0, r5
 8006a70:	4621      	mov	r1, r4
 8006a72:	f7ff ff59 	bl	8006928 <__sflush_r>
 8006a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a78:	07da      	lsls	r2, r3, #31
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	d4e0      	bmi.n	8006a40 <_fflush_r+0xc>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	059b      	lsls	r3, r3, #22
 8006a82:	d4dd      	bmi.n	8006a40 <_fflush_r+0xc>
 8006a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a86:	f000 f93f 	bl	8006d08 <__retarget_lock_release_recursive>
 8006a8a:	e7d9      	b.n	8006a40 <_fflush_r+0xc>
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <_fflush_r+0x70>)
 8006a8e:	429c      	cmp	r4, r3
 8006a90:	d101      	bne.n	8006a96 <_fflush_r+0x62>
 8006a92:	68ac      	ldr	r4, [r5, #8]
 8006a94:	e7df      	b.n	8006a56 <_fflush_r+0x22>
 8006a96:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <_fflush_r+0x74>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	bf08      	it	eq
 8006a9c:	68ec      	ldreq	r4, [r5, #12]
 8006a9e:	e7da      	b.n	8006a56 <_fflush_r+0x22>
 8006aa0:	08007e08 	.word	0x08007e08
 8006aa4:	08007e28 	.word	0x08007e28
 8006aa8:	08007de8 	.word	0x08007de8

08006aac <fflush>:
 8006aac:	4601      	mov	r1, r0
 8006aae:	b920      	cbnz	r0, 8006aba <fflush+0xe>
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <fflush+0x18>)
 8006ab2:	4905      	ldr	r1, [pc, #20]	; (8006ac8 <fflush+0x1c>)
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f000 b8e1 	b.w	8006c7c <_fwalk_reent>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <fflush+0x20>)
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	f7ff bfb9 	b.w	8006a34 <_fflush_r>
 8006ac2:	bf00      	nop
 8006ac4:	08007e48 	.word	0x08007e48
 8006ac8:	08006a35 	.word	0x08006a35
 8006acc:	2000006c 	.word	0x2000006c

08006ad0 <std>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8006ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ade:	6083      	str	r3, [r0, #8]
 8006ae0:	8181      	strh	r1, [r0, #12]
 8006ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae4:	81c2      	strh	r2, [r0, #14]
 8006ae6:	6183      	str	r3, [r0, #24]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2208      	movs	r2, #8
 8006aec:	305c      	adds	r0, #92	; 0x5c
 8006aee:	f000 f91a 	bl	8006d26 <memset>
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x38>)
 8006af4:	6263      	str	r3, [r4, #36]	; 0x24
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x3c>)
 8006af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x40>)
 8006afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x44>)
 8006b00:	6224      	str	r4, [r4, #32]
 8006b02:	6323      	str	r3, [r4, #48]	; 0x30
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	0800701d 	.word	0x0800701d
 8006b0c:	0800703f 	.word	0x0800703f
 8006b10:	08007077 	.word	0x08007077
 8006b14:	0800709b 	.word	0x0800709b

08006b18 <_cleanup_r>:
 8006b18:	4901      	ldr	r1, [pc, #4]	; (8006b20 <_cleanup_r+0x8>)
 8006b1a:	f000 b8af 	b.w	8006c7c <_fwalk_reent>
 8006b1e:	bf00      	nop
 8006b20:	08006a35 	.word	0x08006a35

08006b24 <__sfmoreglue>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	2268      	movs	r2, #104	; 0x68
 8006b28:	1e4d      	subs	r5, r1, #1
 8006b2a:	4355      	muls	r5, r2
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b32:	f000 f96d 	bl	8006e10 <_malloc_r>
 8006b36:	4604      	mov	r4, r0
 8006b38:	b140      	cbz	r0, 8006b4c <__sfmoreglue+0x28>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b40:	300c      	adds	r0, #12
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b48:	f000 f8ed 	bl	8006d26 <memset>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}

08006b50 <__sfp_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_acquire+0x8>)
 8006b52:	f000 b8d8 	b.w	8006d06 <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	20004655 	.word	0x20004655

08006b5c <__sfp_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_release+0x8>)
 8006b5e:	f000 b8d3 	b.w	8006d08 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	20004655 	.word	0x20004655

08006b68 <__sinit_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_acquire+0x8>)
 8006b6a:	f000 b8cc 	b.w	8006d06 <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20004656 	.word	0x20004656

08006b74 <__sinit_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sinit_lock_release+0x8>)
 8006b76:	f000 b8c7 	b.w	8006d08 <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20004656 	.word	0x20004656

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sinit_lock_acquire>
 8006b88:	69a3      	ldr	r3, [r4, #24]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sinit_lock_release>
 8006b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b98:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <__sinit+0x68>)
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <__sinit+0x6c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	bf04      	itt	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	61a3      	streq	r3, [r4, #24]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f820 	bl	8006bf0 <__sfp>
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f81c 	bl	8006bf0 <__sfp>
 8006bb8:	60a0      	str	r0, [r4, #8]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f818 	bl	8006bf0 <__sfp>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	60e0      	str	r0, [r4, #12]
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	6860      	ldr	r0, [r4, #4]
 8006bc8:	f7ff ff82 	bl	8006ad0 <std>
 8006bcc:	68a0      	ldr	r0, [r4, #8]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2109      	movs	r1, #9
 8006bd2:	f7ff ff7d 	bl	8006ad0 <std>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2112      	movs	r1, #18
 8006bdc:	f7ff ff78 	bl	8006ad0 <std>
 8006be0:	2301      	movs	r3, #1
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	e7d2      	b.n	8006b8c <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	08007e48 	.word	0x08007e48
 8006bec:	08006b19 	.word	0x08006b19

08006bf0 <__sfp>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f7ff ffac 	bl	8006b50 <__sfp_lock_acquire>
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <__sfp+0x84>)
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	69b3      	ldr	r3, [r6, #24]
 8006bfe:	b913      	cbnz	r3, 8006c06 <__sfp+0x16>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff ffbd 	bl	8006b80 <__sinit>
 8006c06:	3648      	adds	r6, #72	; 0x48
 8006c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	d503      	bpl.n	8006c18 <__sfp+0x28>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	b30b      	cbz	r3, 8006c58 <__sfp+0x68>
 8006c14:	6836      	ldr	r6, [r6, #0]
 8006c16:	e7f7      	b.n	8006c08 <__sfp+0x18>
 8006c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c1c:	b9d5      	cbnz	r5, 8006c54 <__sfp+0x64>
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <__sfp+0x88>)
 8006c20:	60e3      	str	r3, [r4, #12]
 8006c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c26:	6665      	str	r5, [r4, #100]	; 0x64
 8006c28:	f000 f86c 	bl	8006d04 <__retarget_lock_init_recursive>
 8006c2c:	f7ff ff96 	bl	8006b5c <__sfp_lock_release>
 8006c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	61a5      	str	r5, [r4, #24]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c44:	f000 f86f 	bl	8006d26 <memset>
 8006c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c50:	4620      	mov	r0, r4
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	3468      	adds	r4, #104	; 0x68
 8006c56:	e7d9      	b.n	8006c0c <__sfp+0x1c>
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ff62 	bl	8006b24 <__sfmoreglue>
 8006c60:	4604      	mov	r4, r0
 8006c62:	6030      	str	r0, [r6, #0]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1d5      	bne.n	8006c14 <__sfp+0x24>
 8006c68:	f7ff ff78 	bl	8006b5c <__sfp_lock_release>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e7ee      	b.n	8006c50 <__sfp+0x60>
 8006c72:	bf00      	nop
 8006c74:	08007e48 	.word	0x08007e48
 8006c78:	ffff0001 	.word	0xffff0001

08006c7c <_fwalk_reent>:
 8006c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	4606      	mov	r6, r0
 8006c82:	4688      	mov	r8, r1
 8006c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c88:	2700      	movs	r7, #0
 8006c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c92:	d505      	bpl.n	8006ca0 <_fwalk_reent+0x24>
 8006c94:	6824      	ldr	r4, [r4, #0]
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d1f7      	bne.n	8006c8a <_fwalk_reent+0xe>
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca0:	89ab      	ldrh	r3, [r5, #12]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d907      	bls.n	8006cb6 <_fwalk_reent+0x3a>
 8006ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006caa:	3301      	adds	r3, #1
 8006cac:	d003      	beq.n	8006cb6 <_fwalk_reent+0x3a>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	47c0      	blx	r8
 8006cb4:	4307      	orrs	r7, r0
 8006cb6:	3568      	adds	r5, #104	; 0x68
 8006cb8:	e7e9      	b.n	8006c8e <_fwalk_reent+0x12>
	...

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 fe70 	bl	80079b4 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08007e88 	.word	0x08007e88
 8006cf8:	08007e88 	.word	0x08007e88
 8006cfc:	08007e88 	.word	0x08007e88
 8006d00:	08007e8c 	.word	0x08007e8c

08006d04 <__retarget_lock_init_recursive>:
 8006d04:	4770      	bx	lr

08006d06 <__retarget_lock_acquire_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <__retarget_lock_release_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <memcpy>:
 8006d0a:	440a      	add	r2, r1
 8006d0c:	4291      	cmp	r1, r2
 8006d0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d12:	d100      	bne.n	8006d16 <memcpy+0xc>
 8006d14:	4770      	bx	lr
 8006d16:	b510      	push	{r4, lr}
 8006d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d20:	4291      	cmp	r1, r2
 8006d22:	d1f9      	bne.n	8006d18 <memcpy+0xe>
 8006d24:	bd10      	pop	{r4, pc}

08006d26 <memset>:
 8006d26:	4402      	add	r2, r0
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d100      	bne.n	8006d30 <memset+0xa>
 8006d2e:	4770      	bx	lr
 8006d30:	f803 1b01 	strb.w	r1, [r3], #1
 8006d34:	e7f9      	b.n	8006d2a <memset+0x4>
	...

08006d38 <_free_r>:
 8006d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d044      	beq.n	8006dc8 <_free_r+0x90>
 8006d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d42:	9001      	str	r0, [sp, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f1a1 0404 	sub.w	r4, r1, #4
 8006d4a:	bfb8      	it	lt
 8006d4c:	18e4      	addlt	r4, r4, r3
 8006d4e:	f000 f9dd 	bl	800710c <__malloc_lock>
 8006d52:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <_free_r+0x94>)
 8006d54:	9801      	ldr	r0, [sp, #4]
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	b933      	cbnz	r3, 8006d68 <_free_r+0x30>
 8006d5a:	6063      	str	r3, [r4, #4]
 8006d5c:	6014      	str	r4, [r2, #0]
 8006d5e:	b003      	add	sp, #12
 8006d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d64:	f000 b9d8 	b.w	8007118 <__malloc_unlock>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d908      	bls.n	8006d7e <_free_r+0x46>
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	1961      	adds	r1, r4, r5
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf01      	itttt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	1949      	addeq	r1, r1, r5
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	e7ed      	b.n	8006d5a <_free_r+0x22>
 8006d7e:	461a      	mov	r2, r3
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	b10b      	cbz	r3, 8006d88 <_free_r+0x50>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d9fa      	bls.n	8006d7e <_free_r+0x46>
 8006d88:	6811      	ldr	r1, [r2, #0]
 8006d8a:	1855      	adds	r5, r2, r1
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d10b      	bne.n	8006da8 <_free_r+0x70>
 8006d90:	6824      	ldr	r4, [r4, #0]
 8006d92:	4421      	add	r1, r4
 8006d94:	1854      	adds	r4, r2, r1
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	6011      	str	r1, [r2, #0]
 8006d9a:	d1e0      	bne.n	8006d5e <_free_r+0x26>
 8006d9c:	681c      	ldr	r4, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	6053      	str	r3, [r2, #4]
 8006da2:	4421      	add	r1, r4
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	e7da      	b.n	8006d5e <_free_r+0x26>
 8006da8:	d902      	bls.n	8006db0 <_free_r+0x78>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	e7d6      	b.n	8006d5e <_free_r+0x26>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf04      	itt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	bf04      	itt	eq
 8006dc0:	1949      	addeq	r1, r1, r5
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	6054      	str	r4, [r2, #4]
 8006dc6:	e7ca      	b.n	8006d5e <_free_r+0x26>
 8006dc8:	b003      	add	sp, #12
 8006dca:	bd30      	pop	{r4, r5, pc}
 8006dcc:	20004658 	.word	0x20004658

08006dd0 <sbrk_aligned>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	4e0e      	ldr	r6, [pc, #56]	; (8006e0c <sbrk_aligned+0x3c>)
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6831      	ldr	r1, [r6, #0]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	b911      	cbnz	r1, 8006de2 <sbrk_aligned+0x12>
 8006ddc:	f000 f90e 	bl	8006ffc <_sbrk_r>
 8006de0:	6030      	str	r0, [r6, #0]
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f909 	bl	8006ffc <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d00a      	beq.n	8006e04 <sbrk_aligned+0x34>
 8006dee:	1cc4      	adds	r4, r0, #3
 8006df0:	f024 0403 	bic.w	r4, r4, #3
 8006df4:	42a0      	cmp	r0, r4
 8006df6:	d007      	beq.n	8006e08 <sbrk_aligned+0x38>
 8006df8:	1a21      	subs	r1, r4, r0
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f8fe 	bl	8006ffc <_sbrk_r>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d101      	bne.n	8006e08 <sbrk_aligned+0x38>
 8006e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e08:	4620      	mov	r0, r4
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	2000465c 	.word	0x2000465c

08006e10 <_malloc_r>:
 8006e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	1ccd      	adds	r5, r1, #3
 8006e16:	f025 0503 	bic.w	r5, r5, #3
 8006e1a:	3508      	adds	r5, #8
 8006e1c:	2d0c      	cmp	r5, #12
 8006e1e:	bf38      	it	cc
 8006e20:	250c      	movcc	r5, #12
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	4607      	mov	r7, r0
 8006e26:	db01      	blt.n	8006e2c <_malloc_r+0x1c>
 8006e28:	42a9      	cmp	r1, r5
 8006e2a:	d905      	bls.n	8006e38 <_malloc_r+0x28>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	2600      	movs	r6, #0
 8006e32:	4630      	mov	r0, r6
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	4e2e      	ldr	r6, [pc, #184]	; (8006ef4 <_malloc_r+0xe4>)
 8006e3a:	f000 f967 	bl	800710c <__malloc_lock>
 8006e3e:	6833      	ldr	r3, [r6, #0]
 8006e40:	461c      	mov	r4, r3
 8006e42:	bb34      	cbnz	r4, 8006e92 <_malloc_r+0x82>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ffc2 	bl	8006dd0 <sbrk_aligned>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	4604      	mov	r4, r0
 8006e50:	d14d      	bne.n	8006eee <_malloc_r+0xde>
 8006e52:	6834      	ldr	r4, [r6, #0]
 8006e54:	4626      	mov	r6, r4
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d140      	bne.n	8006edc <_malloc_r+0xcc>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4638      	mov	r0, r7
 8006e60:	eb04 0803 	add.w	r8, r4, r3
 8006e64:	f000 f8ca 	bl	8006ffc <_sbrk_r>
 8006e68:	4580      	cmp	r8, r0
 8006e6a:	d13a      	bne.n	8006ee2 <_malloc_r+0xd2>
 8006e6c:	6821      	ldr	r1, [r4, #0]
 8006e6e:	3503      	adds	r5, #3
 8006e70:	1a6d      	subs	r5, r5, r1
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff ffa5 	bl	8006dd0 <sbrk_aligned>
 8006e86:	3001      	adds	r0, #1
 8006e88:	d02b      	beq.n	8006ee2 <_malloc_r+0xd2>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	442b      	add	r3, r5
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	e00e      	b.n	8006eb0 <_malloc_r+0xa0>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	1b52      	subs	r2, r2, r5
 8006e96:	d41e      	bmi.n	8006ed6 <_malloc_r+0xc6>
 8006e98:	2a0b      	cmp	r2, #11
 8006e9a:	d916      	bls.n	8006eca <_malloc_r+0xba>
 8006e9c:	1961      	adds	r1, r4, r5
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6025      	str	r5, [r4, #0]
 8006ea2:	bf18      	it	ne
 8006ea4:	6059      	strne	r1, [r3, #4]
 8006ea6:	6863      	ldr	r3, [r4, #4]
 8006ea8:	bf08      	it	eq
 8006eaa:	6031      	streq	r1, [r6, #0]
 8006eac:	5162      	str	r2, [r4, r5]
 8006eae:	604b      	str	r3, [r1, #4]
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f104 060b 	add.w	r6, r4, #11
 8006eb6:	f000 f92f 	bl	8007118 <__malloc_unlock>
 8006eba:	f026 0607 	bic.w	r6, r6, #7
 8006ebe:	1d23      	adds	r3, r4, #4
 8006ec0:	1af2      	subs	r2, r6, r3
 8006ec2:	d0b6      	beq.n	8006e32 <_malloc_r+0x22>
 8006ec4:	1b9b      	subs	r3, r3, r6
 8006ec6:	50a3      	str	r3, [r4, r2]
 8006ec8:	e7b3      	b.n	8006e32 <_malloc_r+0x22>
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	bf0c      	ite	eq
 8006ed0:	6032      	streq	r2, [r6, #0]
 8006ed2:	605a      	strne	r2, [r3, #4]
 8006ed4:	e7ec      	b.n	8006eb0 <_malloc_r+0xa0>
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	6864      	ldr	r4, [r4, #4]
 8006eda:	e7b2      	b.n	8006e42 <_malloc_r+0x32>
 8006edc:	4634      	mov	r4, r6
 8006ede:	6876      	ldr	r6, [r6, #4]
 8006ee0:	e7b9      	b.n	8006e56 <_malloc_r+0x46>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f000 f916 	bl	8007118 <__malloc_unlock>
 8006eec:	e7a1      	b.n	8006e32 <_malloc_r+0x22>
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	e7de      	b.n	8006eb0 <_malloc_r+0xa0>
 8006ef2:	bf00      	nop
 8006ef4:	20004658 	.word	0x20004658

08006ef8 <iprintf>:
 8006ef8:	b40f      	push	{r0, r1, r2, r3}
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <iprintf+0x2c>)
 8006efc:	b513      	push	{r0, r1, r4, lr}
 8006efe:	681c      	ldr	r4, [r3, #0]
 8006f00:	b124      	cbz	r4, 8006f0c <iprintf+0x14>
 8006f02:	69a3      	ldr	r3, [r4, #24]
 8006f04:	b913      	cbnz	r3, 8006f0c <iprintf+0x14>
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff fe3a 	bl	8006b80 <__sinit>
 8006f0c:	ab05      	add	r3, sp, #20
 8006f0e:	9a04      	ldr	r2, [sp, #16]
 8006f10:	68a1      	ldr	r1, [r4, #8]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f92f 	bl	8007178 <_vfiprintf_r>
 8006f1a:	b002      	add	sp, #8
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	b004      	add	sp, #16
 8006f22:	4770      	bx	lr
 8006f24:	2000006c 	.word	0x2000006c

08006f28 <cleanup_glue>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	6809      	ldr	r1, [r1, #0]
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b109      	cbz	r1, 8006f36 <cleanup_glue+0xe>
 8006f32:	f7ff fff9 	bl	8006f28 <cleanup_glue>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f3e:	f7ff befb 	b.w	8006d38 <_free_r>
	...

08006f44 <_reclaim_reent>:
 8006f44:	4b2c      	ldr	r3, [pc, #176]	; (8006ff8 <_reclaim_reent+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4283      	cmp	r3, r0
 8006f4a:	b570      	push	{r4, r5, r6, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	d051      	beq.n	8006ff4 <_reclaim_reent+0xb0>
 8006f50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f52:	b143      	cbz	r3, 8006f66 <_reclaim_reent+0x22>
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d14a      	bne.n	8006ff0 <_reclaim_reent+0xac>
 8006f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	b111      	cbz	r1, 8006f66 <_reclaim_reent+0x22>
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7ff fee9 	bl	8006d38 <_free_r>
 8006f66:	6961      	ldr	r1, [r4, #20]
 8006f68:	b111      	cbz	r1, 8006f70 <_reclaim_reent+0x2c>
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff fee4 	bl	8006d38 <_free_r>
 8006f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f72:	b111      	cbz	r1, 8006f7a <_reclaim_reent+0x36>
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7ff fedf 	bl	8006d38 <_free_r>
 8006f7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f7c:	b111      	cbz	r1, 8006f84 <_reclaim_reent+0x40>
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff feda 	bl	8006d38 <_free_r>
 8006f84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f86:	b111      	cbz	r1, 8006f8e <_reclaim_reent+0x4a>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff fed5 	bl	8006d38 <_free_r>
 8006f8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f90:	b111      	cbz	r1, 8006f98 <_reclaim_reent+0x54>
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fed0 	bl	8006d38 <_free_r>
 8006f98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f9a:	b111      	cbz	r1, 8006fa2 <_reclaim_reent+0x5e>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff fecb 	bl	8006d38 <_free_r>
 8006fa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fa4:	b111      	cbz	r1, 8006fac <_reclaim_reent+0x68>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f7ff fec6 	bl	8006d38 <_free_r>
 8006fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fae:	b111      	cbz	r1, 8006fb6 <_reclaim_reent+0x72>
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff fec1 	bl	8006d38 <_free_r>
 8006fb6:	69a3      	ldr	r3, [r4, #24]
 8006fb8:	b1e3      	cbz	r3, 8006ff4 <_reclaim_reent+0xb0>
 8006fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4798      	blx	r3
 8006fc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fc2:	b1b9      	cbz	r1, 8006ff4 <_reclaim_reent+0xb0>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fca:	f7ff bfad 	b.w	8006f28 <cleanup_glue>
 8006fce:	5949      	ldr	r1, [r1, r5]
 8006fd0:	b941      	cbnz	r1, 8006fe4 <_reclaim_reent+0xa0>
 8006fd2:	3504      	adds	r5, #4
 8006fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd6:	2d80      	cmp	r5, #128	; 0x80
 8006fd8:	68d9      	ldr	r1, [r3, #12]
 8006fda:	d1f8      	bne.n	8006fce <_reclaim_reent+0x8a>
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff feab 	bl	8006d38 <_free_r>
 8006fe2:	e7ba      	b.n	8006f5a <_reclaim_reent+0x16>
 8006fe4:	680e      	ldr	r6, [r1, #0]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff fea6 	bl	8006d38 <_free_r>
 8006fec:	4631      	mov	r1, r6
 8006fee:	e7ef      	b.n	8006fd0 <_reclaim_reent+0x8c>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	e7ef      	b.n	8006fd4 <_reclaim_reent+0x90>
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2000006c 	.word	0x2000006c

08006ffc <_sbrk_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_sbrk_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7fa fafa 	bl	8001600 <_sbrk>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_sbrk_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_sbrk_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20004660 	.word	0x20004660

0800701c <__sread>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	f000 fb6c 	bl	8007700 <_read_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	bfab      	itete	ge
 800702c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702e:	89a3      	ldrhlt	r3, [r4, #12]
 8007030:	181b      	addge	r3, r3, r0
 8007032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007036:	bfac      	ite	ge
 8007038:	6563      	strge	r3, [r4, #84]	; 0x54
 800703a:	81a3      	strhlt	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__swrite>:
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	461f      	mov	r7, r3
 8007044:	898b      	ldrh	r3, [r1, #12]
 8007046:	05db      	lsls	r3, r3, #23
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4616      	mov	r6, r2
 800704e:	d505      	bpl.n	800705c <__swrite+0x1e>
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	2302      	movs	r3, #2
 8007056:	2200      	movs	r2, #0
 8007058:	f000 f846 	bl	80070e8 <_lseek_r>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007072:	f000 b817 	b.w	80070a4 <_write_r>

08007076 <__sseek>:
 8007076:	b510      	push	{r4, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 f833 	bl	80070e8 <_lseek_r>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	bf15      	itete	ne
 8007088:	6560      	strne	r0, [r4, #84]	; 0x54
 800708a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800708e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007092:	81a3      	strheq	r3, [r4, #12]
 8007094:	bf18      	it	ne
 8007096:	81a3      	strhne	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__sclose>:
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 b813 	b.w	80070c8 <_close_r>
	...

080070a4 <_write_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_write_r+0x20>)
 80070a8:	4604      	mov	r4, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7fa fa53 	bl	800155e <_write>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_write_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_write_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20004660 	.word	0x20004660

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7fa fa5f 	bl	8001596 <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20004660 	.word	0x20004660

080070e8 <_lseek_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_lseek_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fa fa74 	bl	80015e4 <_lseek>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_lseek_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_lseek_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20004660 	.word	0x20004660

0800710c <__malloc_lock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_lock+0x8>)
 800710e:	f7ff bdfa 	b.w	8006d06 <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	20004654 	.word	0x20004654

08007118 <__malloc_unlock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_unlock+0x8>)
 800711a:	f7ff bdf5 	b.w	8006d08 <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	20004654 	.word	0x20004654

08007124 <__sfputc_r>:
 8007124:	6893      	ldr	r3, [r2, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	b410      	push	{r4}
 800712c:	6093      	str	r3, [r2, #8]
 800712e:	da08      	bge.n	8007142 <__sfputc_r+0x1e>
 8007130:	6994      	ldr	r4, [r2, #24]
 8007132:	42a3      	cmp	r3, r4
 8007134:	db01      	blt.n	800713a <__sfputc_r+0x16>
 8007136:	290a      	cmp	r1, #10
 8007138:	d103      	bne.n	8007142 <__sfputc_r+0x1e>
 800713a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800713e:	f000 baf1 	b.w	8007724 <__swbuf_r>
 8007142:	6813      	ldr	r3, [r2, #0]
 8007144:	1c58      	adds	r0, r3, #1
 8007146:	6010      	str	r0, [r2, #0]
 8007148:	7019      	strb	r1, [r3, #0]
 800714a:	4608      	mov	r0, r1
 800714c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007150:	4770      	bx	lr

08007152 <__sfputs_r>:
 8007152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007154:	4606      	mov	r6, r0
 8007156:	460f      	mov	r7, r1
 8007158:	4614      	mov	r4, r2
 800715a:	18d5      	adds	r5, r2, r3
 800715c:	42ac      	cmp	r4, r5
 800715e:	d101      	bne.n	8007164 <__sfputs_r+0x12>
 8007160:	2000      	movs	r0, #0
 8007162:	e007      	b.n	8007174 <__sfputs_r+0x22>
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	463a      	mov	r2, r7
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ffda 	bl	8007124 <__sfputc_r>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d1f3      	bne.n	800715c <__sfputs_r+0xa>
 8007174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007178 <_vfiprintf_r>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	460d      	mov	r5, r1
 800717e:	b09d      	sub	sp, #116	; 0x74
 8007180:	4614      	mov	r4, r2
 8007182:	4698      	mov	r8, r3
 8007184:	4606      	mov	r6, r0
 8007186:	b118      	cbz	r0, 8007190 <_vfiprintf_r+0x18>
 8007188:	6983      	ldr	r3, [r0, #24]
 800718a:	b90b      	cbnz	r3, 8007190 <_vfiprintf_r+0x18>
 800718c:	f7ff fcf8 	bl	8006b80 <__sinit>
 8007190:	4b89      	ldr	r3, [pc, #548]	; (80073b8 <_vfiprintf_r+0x240>)
 8007192:	429d      	cmp	r5, r3
 8007194:	d11b      	bne.n	80071ce <_vfiprintf_r+0x56>
 8007196:	6875      	ldr	r5, [r6, #4]
 8007198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d405      	bmi.n	80071aa <_vfiprintf_r+0x32>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	059a      	lsls	r2, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_vfiprintf_r+0x32>
 80071a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a6:	f7ff fdae 	bl	8006d06 <__retarget_lock_acquire_recursive>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	071b      	lsls	r3, r3, #28
 80071ae:	d501      	bpl.n	80071b4 <_vfiprintf_r+0x3c>
 80071b0:	692b      	ldr	r3, [r5, #16]
 80071b2:	b9eb      	cbnz	r3, 80071f0 <_vfiprintf_r+0x78>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f000 fb06 	bl	80077c8 <__swsetup_r>
 80071bc:	b1c0      	cbz	r0, 80071f0 <_vfiprintf_r+0x78>
 80071be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c0:	07dc      	lsls	r4, r3, #31
 80071c2:	d50e      	bpl.n	80071e2 <_vfiprintf_r+0x6a>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c8:	b01d      	add	sp, #116	; 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <_vfiprintf_r+0x244>)
 80071d0:	429d      	cmp	r5, r3
 80071d2:	d101      	bne.n	80071d8 <_vfiprintf_r+0x60>
 80071d4:	68b5      	ldr	r5, [r6, #8]
 80071d6:	e7df      	b.n	8007198 <_vfiprintf_r+0x20>
 80071d8:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <_vfiprintf_r+0x248>)
 80071da:	429d      	cmp	r5, r3
 80071dc:	bf08      	it	eq
 80071de:	68f5      	ldreq	r5, [r6, #12]
 80071e0:	e7da      	b.n	8007198 <_vfiprintf_r+0x20>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	0598      	lsls	r0, r3, #22
 80071e6:	d4ed      	bmi.n	80071c4 <_vfiprintf_r+0x4c>
 80071e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ea:	f7ff fd8d 	bl	8006d08 <__retarget_lock_release_recursive>
 80071ee:	e7e9      	b.n	80071c4 <_vfiprintf_r+0x4c>
 80071f0:	2300      	movs	r3, #0
 80071f2:	9309      	str	r3, [sp, #36]	; 0x24
 80071f4:	2320      	movs	r3, #32
 80071f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80071fe:	2330      	movs	r3, #48	; 0x30
 8007200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073c4 <_vfiprintf_r+0x24c>
 8007204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007208:	f04f 0901 	mov.w	r9, #1
 800720c:	4623      	mov	r3, r4
 800720e:	469a      	mov	sl, r3
 8007210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007214:	b10a      	cbz	r2, 800721a <_vfiprintf_r+0xa2>
 8007216:	2a25      	cmp	r2, #37	; 0x25
 8007218:	d1f9      	bne.n	800720e <_vfiprintf_r+0x96>
 800721a:	ebba 0b04 	subs.w	fp, sl, r4
 800721e:	d00b      	beq.n	8007238 <_vfiprintf_r+0xc0>
 8007220:	465b      	mov	r3, fp
 8007222:	4622      	mov	r2, r4
 8007224:	4629      	mov	r1, r5
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ff93 	bl	8007152 <__sfputs_r>
 800722c:	3001      	adds	r0, #1
 800722e:	f000 80aa 	beq.w	8007386 <_vfiprintf_r+0x20e>
 8007232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007234:	445a      	add	r2, fp
 8007236:	9209      	str	r2, [sp, #36]	; 0x24
 8007238:	f89a 3000 	ldrb.w	r3, [sl]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a2 	beq.w	8007386 <_vfiprintf_r+0x20e>
 8007242:	2300      	movs	r3, #0
 8007244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800724c:	f10a 0a01 	add.w	sl, sl, #1
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007258:	931a      	str	r3, [sp, #104]	; 0x68
 800725a:	4654      	mov	r4, sl
 800725c:	2205      	movs	r2, #5
 800725e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007262:	4858      	ldr	r0, [pc, #352]	; (80073c4 <_vfiprintf_r+0x24c>)
 8007264:	f7f8 ffc4 	bl	80001f0 <memchr>
 8007268:	9a04      	ldr	r2, [sp, #16]
 800726a:	b9d8      	cbnz	r0, 80072a4 <_vfiprintf_r+0x12c>
 800726c:	06d1      	lsls	r1, r2, #27
 800726e:	bf44      	itt	mi
 8007270:	2320      	movmi	r3, #32
 8007272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007276:	0713      	lsls	r3, r2, #28
 8007278:	bf44      	itt	mi
 800727a:	232b      	movmi	r3, #43	; 0x2b
 800727c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007280:	f89a 3000 	ldrb.w	r3, [sl]
 8007284:	2b2a      	cmp	r3, #42	; 0x2a
 8007286:	d015      	beq.n	80072b4 <_vfiprintf_r+0x13c>
 8007288:	9a07      	ldr	r2, [sp, #28]
 800728a:	4654      	mov	r4, sl
 800728c:	2000      	movs	r0, #0
 800728e:	f04f 0c0a 	mov.w	ip, #10
 8007292:	4621      	mov	r1, r4
 8007294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007298:	3b30      	subs	r3, #48	; 0x30
 800729a:	2b09      	cmp	r3, #9
 800729c:	d94e      	bls.n	800733c <_vfiprintf_r+0x1c4>
 800729e:	b1b0      	cbz	r0, 80072ce <_vfiprintf_r+0x156>
 80072a0:	9207      	str	r2, [sp, #28]
 80072a2:	e014      	b.n	80072ce <_vfiprintf_r+0x156>
 80072a4:	eba0 0308 	sub.w	r3, r0, r8
 80072a8:	fa09 f303 	lsl.w	r3, r9, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	46a2      	mov	sl, r4
 80072b2:	e7d2      	b.n	800725a <_vfiprintf_r+0xe2>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	1d19      	adds	r1, r3, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfbb      	ittet	lt
 80072c0:	425b      	neglt	r3, r3
 80072c2:	f042 0202 	orrlt.w	r2, r2, #2
 80072c6:	9307      	strge	r3, [sp, #28]
 80072c8:	9307      	strlt	r3, [sp, #28]
 80072ca:	bfb8      	it	lt
 80072cc:	9204      	strlt	r2, [sp, #16]
 80072ce:	7823      	ldrb	r3, [r4, #0]
 80072d0:	2b2e      	cmp	r3, #46	; 0x2e
 80072d2:	d10c      	bne.n	80072ee <_vfiprintf_r+0x176>
 80072d4:	7863      	ldrb	r3, [r4, #1]
 80072d6:	2b2a      	cmp	r3, #42	; 0x2a
 80072d8:	d135      	bne.n	8007346 <_vfiprintf_r+0x1ce>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	1d1a      	adds	r2, r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	9203      	str	r2, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072ea:	3402      	adds	r4, #2
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073d4 <_vfiprintf_r+0x25c>
 80072f2:	7821      	ldrb	r1, [r4, #0]
 80072f4:	2203      	movs	r2, #3
 80072f6:	4650      	mov	r0, sl
 80072f8:	f7f8 ff7a 	bl	80001f0 <memchr>
 80072fc:	b140      	cbz	r0, 8007310 <_vfiprintf_r+0x198>
 80072fe:	2340      	movs	r3, #64	; 0x40
 8007300:	eba0 000a 	sub.w	r0, r0, sl
 8007304:	fa03 f000 	lsl.w	r0, r3, r0
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	4303      	orrs	r3, r0
 800730c:	3401      	adds	r4, #1
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007314:	482c      	ldr	r0, [pc, #176]	; (80073c8 <_vfiprintf_r+0x250>)
 8007316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800731a:	2206      	movs	r2, #6
 800731c:	f7f8 ff68 	bl	80001f0 <memchr>
 8007320:	2800      	cmp	r0, #0
 8007322:	d03f      	beq.n	80073a4 <_vfiprintf_r+0x22c>
 8007324:	4b29      	ldr	r3, [pc, #164]	; (80073cc <_vfiprintf_r+0x254>)
 8007326:	bb1b      	cbnz	r3, 8007370 <_vfiprintf_r+0x1f8>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	3307      	adds	r3, #7
 800732c:	f023 0307 	bic.w	r3, r3, #7
 8007330:	3308      	adds	r3, #8
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007336:	443b      	add	r3, r7
 8007338:	9309      	str	r3, [sp, #36]	; 0x24
 800733a:	e767      	b.n	800720c <_vfiprintf_r+0x94>
 800733c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007340:	460c      	mov	r4, r1
 8007342:	2001      	movs	r0, #1
 8007344:	e7a5      	b.n	8007292 <_vfiprintf_r+0x11a>
 8007346:	2300      	movs	r3, #0
 8007348:	3401      	adds	r4, #1
 800734a:	9305      	str	r3, [sp, #20]
 800734c:	4619      	mov	r1, r3
 800734e:	f04f 0c0a 	mov.w	ip, #10
 8007352:	4620      	mov	r0, r4
 8007354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007358:	3a30      	subs	r2, #48	; 0x30
 800735a:	2a09      	cmp	r2, #9
 800735c:	d903      	bls.n	8007366 <_vfiprintf_r+0x1ee>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c5      	beq.n	80072ee <_vfiprintf_r+0x176>
 8007362:	9105      	str	r1, [sp, #20]
 8007364:	e7c3      	b.n	80072ee <_vfiprintf_r+0x176>
 8007366:	fb0c 2101 	mla	r1, ip, r1, r2
 800736a:	4604      	mov	r4, r0
 800736c:	2301      	movs	r3, #1
 800736e:	e7f0      	b.n	8007352 <_vfiprintf_r+0x1da>
 8007370:	ab03      	add	r3, sp, #12
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	462a      	mov	r2, r5
 8007376:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <_vfiprintf_r+0x258>)
 8007378:	a904      	add	r1, sp, #16
 800737a:	4630      	mov	r0, r6
 800737c:	f3af 8000 	nop.w
 8007380:	4607      	mov	r7, r0
 8007382:	1c78      	adds	r0, r7, #1
 8007384:	d1d6      	bne.n	8007334 <_vfiprintf_r+0x1bc>
 8007386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007388:	07d9      	lsls	r1, r3, #31
 800738a:	d405      	bmi.n	8007398 <_vfiprintf_r+0x220>
 800738c:	89ab      	ldrh	r3, [r5, #12]
 800738e:	059a      	lsls	r2, r3, #22
 8007390:	d402      	bmi.n	8007398 <_vfiprintf_r+0x220>
 8007392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007394:	f7ff fcb8 	bl	8006d08 <__retarget_lock_release_recursive>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	065b      	lsls	r3, r3, #25
 800739c:	f53f af12 	bmi.w	80071c4 <_vfiprintf_r+0x4c>
 80073a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a2:	e711      	b.n	80071c8 <_vfiprintf_r+0x50>
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <_vfiprintf_r+0x258>)
 80073ac:	a904      	add	r1, sp, #16
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 f880 	bl	80074b4 <_printf_i>
 80073b4:	e7e4      	b.n	8007380 <_vfiprintf_r+0x208>
 80073b6:	bf00      	nop
 80073b8:	08007e08 	.word	0x08007e08
 80073bc:	08007e28 	.word	0x08007e28
 80073c0:	08007de8 	.word	0x08007de8
 80073c4:	08007e4c 	.word	0x08007e4c
 80073c8:	08007e56 	.word	0x08007e56
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007153 	.word	0x08007153
 80073d4:	08007e52 	.word	0x08007e52

080073d8 <_printf_common>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	4699      	mov	r9, r3
 80073e0:	688a      	ldr	r2, [r1, #8]
 80073e2:	690b      	ldr	r3, [r1, #16]
 80073e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfb8      	it	lt
 80073ec:	4613      	movlt	r3, r2
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f4:	4607      	mov	r7, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b10a      	cbz	r2, 80073fe <_printf_common+0x26>
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	0699      	lsls	r1, r3, #26
 8007402:	bf42      	ittt	mi
 8007404:	6833      	ldrmi	r3, [r6, #0]
 8007406:	3302      	addmi	r3, #2
 8007408:	6033      	strmi	r3, [r6, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	f015 0506 	ands.w	r5, r5, #6
 8007410:	d106      	bne.n	8007420 <_printf_common+0x48>
 8007412:	f104 0a19 	add.w	sl, r4, #25
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	6832      	ldr	r2, [r6, #0]
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	42ab      	cmp	r3, r5
 800741e:	dc26      	bgt.n	800746e <_printf_common+0x96>
 8007420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007424:	1e13      	subs	r3, r2, #0
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	2301      	movne	r3, #1
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d42b      	bmi.n	8007488 <_printf_common+0xb0>
 8007430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d01e      	beq.n	800747c <_printf_common+0xa4>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	68e5      	ldr	r5, [r4, #12]
 8007442:	6832      	ldr	r2, [r6, #0]
 8007444:	f003 0306 	and.w	r3, r3, #6
 8007448:	2b04      	cmp	r3, #4
 800744a:	bf08      	it	eq
 800744c:	1aad      	subeq	r5, r5, r2
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	bf0c      	ite	eq
 8007454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007458:	2500      	movne	r5, #0
 800745a:	4293      	cmp	r3, r2
 800745c:	bfc4      	itt	gt
 800745e:	1a9b      	subgt	r3, r3, r2
 8007460:	18ed      	addgt	r5, r5, r3
 8007462:	2600      	movs	r6, #0
 8007464:	341a      	adds	r4, #26
 8007466:	42b5      	cmp	r5, r6
 8007468:	d11a      	bne.n	80074a0 <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e008      	b.n	8007480 <_printf_common+0xa8>
 800746e:	2301      	movs	r3, #1
 8007470:	4652      	mov	r2, sl
 8007472:	4649      	mov	r1, r9
 8007474:	4638      	mov	r0, r7
 8007476:	47c0      	blx	r8
 8007478:	3001      	adds	r0, #1
 800747a:	d103      	bne.n	8007484 <_printf_common+0xac>
 800747c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	3501      	adds	r5, #1
 8007486:	e7c6      	b.n	8007416 <_printf_common+0x3e>
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	2030      	movs	r0, #48	; 0x30
 800748e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007492:	4422      	add	r2, r4
 8007494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800749c:	3302      	adds	r3, #2
 800749e:	e7c7      	b.n	8007430 <_printf_common+0x58>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4622      	mov	r2, r4
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7d9      	b.n	8007466 <_printf_common+0x8e>
	...

080074b4 <_printf_i>:
 80074b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	7e0f      	ldrb	r7, [r1, #24]
 80074ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074bc:	2f78      	cmp	r7, #120	; 0x78
 80074be:	4691      	mov	r9, r2
 80074c0:	4680      	mov	r8, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	469a      	mov	sl, r3
 80074c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ca:	d807      	bhi.n	80074dc <_printf_i+0x28>
 80074cc:	2f62      	cmp	r7, #98	; 0x62
 80074ce:	d80a      	bhi.n	80074e6 <_printf_i+0x32>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	f000 80d8 	beq.w	8007686 <_printf_i+0x1d2>
 80074d6:	2f58      	cmp	r7, #88	; 0x58
 80074d8:	f000 80a3 	beq.w	8007622 <_printf_i+0x16e>
 80074dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e4:	e03a      	b.n	800755c <_printf_i+0xa8>
 80074e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ea:	2b15      	cmp	r3, #21
 80074ec:	d8f6      	bhi.n	80074dc <_printf_i+0x28>
 80074ee:	a101      	add	r1, pc, #4	; (adr r1, 80074f4 <_printf_i+0x40>)
 80074f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	08007561 	.word	0x08007561
 80074fc:	080074dd 	.word	0x080074dd
 8007500:	080074dd 	.word	0x080074dd
 8007504:	080074dd 	.word	0x080074dd
 8007508:	080074dd 	.word	0x080074dd
 800750c:	08007561 	.word	0x08007561
 8007510:	080074dd 	.word	0x080074dd
 8007514:	080074dd 	.word	0x080074dd
 8007518:	080074dd 	.word	0x080074dd
 800751c:	080074dd 	.word	0x080074dd
 8007520:	0800766d 	.word	0x0800766d
 8007524:	08007591 	.word	0x08007591
 8007528:	0800764f 	.word	0x0800764f
 800752c:	080074dd 	.word	0x080074dd
 8007530:	080074dd 	.word	0x080074dd
 8007534:	0800768f 	.word	0x0800768f
 8007538:	080074dd 	.word	0x080074dd
 800753c:	08007591 	.word	0x08007591
 8007540:	080074dd 	.word	0x080074dd
 8007544:	080074dd 	.word	0x080074dd
 8007548:	08007657 	.word	0x08007657
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800755c:	2301      	movs	r3, #1
 800755e:	e0a3      	b.n	80076a8 <_printf_i+0x1f4>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	6829      	ldr	r1, [r5, #0]
 8007564:	0606      	lsls	r6, r0, #24
 8007566:	f101 0304 	add.w	r3, r1, #4
 800756a:	d50a      	bpl.n	8007582 <_printf_i+0xce>
 800756c:	680e      	ldr	r6, [r1, #0]
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	2e00      	cmp	r6, #0
 8007572:	da03      	bge.n	800757c <_printf_i+0xc8>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	4276      	negs	r6, r6
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	485e      	ldr	r0, [pc, #376]	; (80076f8 <_printf_i+0x244>)
 800757e:	230a      	movs	r3, #10
 8007580:	e019      	b.n	80075b6 <_printf_i+0x102>
 8007582:	680e      	ldr	r6, [r1, #0]
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800758a:	bf18      	it	ne
 800758c:	b236      	sxthne	r6, r6
 800758e:	e7ef      	b.n	8007570 <_printf_i+0xbc>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	6820      	ldr	r0, [r4, #0]
 8007594:	1d19      	adds	r1, r3, #4
 8007596:	6029      	str	r1, [r5, #0]
 8007598:	0601      	lsls	r1, r0, #24
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0xec>
 800759c:	681e      	ldr	r6, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0xf2>
 80075a0:	0646      	lsls	r6, r0, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0xe8>
 80075a4:	881e      	ldrh	r6, [r3, #0]
 80075a6:	4854      	ldr	r0, [pc, #336]	; (80076f8 <_printf_i+0x244>)
 80075a8:	2f6f      	cmp	r7, #111	; 0x6f
 80075aa:	bf0c      	ite	eq
 80075ac:	2308      	moveq	r3, #8
 80075ae:	230a      	movne	r3, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b6:	6865      	ldr	r5, [r4, #4]
 80075b8:	60a5      	str	r5, [r4, #8]
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	bfa2      	ittt	ge
 80075be:	6821      	ldrge	r1, [r4, #0]
 80075c0:	f021 0104 	bicge.w	r1, r1, #4
 80075c4:	6021      	strge	r1, [r4, #0]
 80075c6:	b90e      	cbnz	r6, 80075cc <_printf_i+0x118>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	d04d      	beq.n	8007668 <_printf_i+0x1b4>
 80075cc:	4615      	mov	r5, r2
 80075ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80075d2:	fb03 6711 	mls	r7, r3, r1, r6
 80075d6:	5dc7      	ldrb	r7, [r0, r7]
 80075d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075dc:	4637      	mov	r7, r6
 80075de:	42bb      	cmp	r3, r7
 80075e0:	460e      	mov	r6, r1
 80075e2:	d9f4      	bls.n	80075ce <_printf_i+0x11a>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10b      	bne.n	8007600 <_printf_i+0x14c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07de      	lsls	r6, r3, #31
 80075ec:	d508      	bpl.n	8007600 <_printf_i+0x14c>
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	bfde      	ittt	le
 80075f6:	2330      	movle	r3, #48	; 0x30
 80075f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007600:	1b52      	subs	r2, r2, r5
 8007602:	6122      	str	r2, [r4, #16]
 8007604:	f8cd a000 	str.w	sl, [sp]
 8007608:	464b      	mov	r3, r9
 800760a:	aa03      	add	r2, sp, #12
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff fee2 	bl	80073d8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	d14c      	bne.n	80076b2 <_printf_i+0x1fe>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800761c:	b004      	add	sp, #16
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	4835      	ldr	r0, [pc, #212]	; (80076f8 <_printf_i+0x244>)
 8007624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007628:	6829      	ldr	r1, [r5, #0]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007630:	6029      	str	r1, [r5, #0]
 8007632:	061d      	lsls	r5, r3, #24
 8007634:	d514      	bpl.n	8007660 <_printf_i+0x1ac>
 8007636:	07df      	lsls	r7, r3, #31
 8007638:	bf44      	itt	mi
 800763a:	f043 0320 	orrmi.w	r3, r3, #32
 800763e:	6023      	strmi	r3, [r4, #0]
 8007640:	b91e      	cbnz	r6, 800764a <_printf_i+0x196>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f023 0320 	bic.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2310      	movs	r3, #16
 800764c:	e7b0      	b.n	80075b0 <_printf_i+0xfc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2378      	movs	r3, #120	; 0x78
 8007658:	4828      	ldr	r0, [pc, #160]	; (80076fc <_printf_i+0x248>)
 800765a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800765e:	e7e3      	b.n	8007628 <_printf_i+0x174>
 8007660:	0659      	lsls	r1, r3, #25
 8007662:	bf48      	it	mi
 8007664:	b2b6      	uxthmi	r6, r6
 8007666:	e7e6      	b.n	8007636 <_printf_i+0x182>
 8007668:	4615      	mov	r5, r2
 800766a:	e7bb      	b.n	80075e4 <_printf_i+0x130>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	6826      	ldr	r6, [r4, #0]
 8007670:	6961      	ldr	r1, [r4, #20]
 8007672:	1d18      	adds	r0, r3, #4
 8007674:	6028      	str	r0, [r5, #0]
 8007676:	0635      	lsls	r5, r6, #24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	d501      	bpl.n	8007680 <_printf_i+0x1cc>
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0x1d2>
 8007680:	0670      	lsls	r0, r6, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0x1c8>
 8007684:	8019      	strh	r1, [r3, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	4615      	mov	r5, r2
 800768c:	e7ba      	b.n	8007604 <_printf_i+0x150>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	602a      	str	r2, [r5, #0]
 8007694:	681d      	ldr	r5, [r3, #0]
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	4628      	mov	r0, r5
 800769c:	f7f8 fda8 	bl	80001f0 <memchr>
 80076a0:	b108      	cbz	r0, 80076a6 <_printf_i+0x1f2>
 80076a2:	1b40      	subs	r0, r0, r5
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	2300      	movs	r3, #0
 80076ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b0:	e7a8      	b.n	8007604 <_printf_i+0x150>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	462a      	mov	r2, r5
 80076b6:	4649      	mov	r1, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	47d0      	blx	sl
 80076bc:	3001      	adds	r0, #1
 80076be:	d0ab      	beq.n	8007618 <_printf_i+0x164>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	079b      	lsls	r3, r3, #30
 80076c4:	d413      	bmi.n	80076ee <_printf_i+0x23a>
 80076c6:	68e0      	ldr	r0, [r4, #12]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	4298      	cmp	r0, r3
 80076cc:	bfb8      	it	lt
 80076ce:	4618      	movlt	r0, r3
 80076d0:	e7a4      	b.n	800761c <_printf_i+0x168>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d09b      	beq.n	8007618 <_printf_i+0x164>
 80076e0:	3501      	adds	r5, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	dcf2      	bgt.n	80076d2 <_printf_i+0x21e>
 80076ec:	e7eb      	b.n	80076c6 <_printf_i+0x212>
 80076ee:	2500      	movs	r5, #0
 80076f0:	f104 0619 	add.w	r6, r4, #25
 80076f4:	e7f5      	b.n	80076e2 <_printf_i+0x22e>
 80076f6:	bf00      	nop
 80076f8:	08007e5d 	.word	0x08007e5d
 80076fc:	08007e6e 	.word	0x08007e6e

08007700 <_read_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d07      	ldr	r5, [pc, #28]	; (8007720 <_read_r+0x20>)
 8007704:	4604      	mov	r4, r0
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7f9 ff08 	bl	8001524 <_read>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_read_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_read_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	20004660 	.word	0x20004660

08007724 <__swbuf_r>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	460e      	mov	r6, r1
 8007728:	4614      	mov	r4, r2
 800772a:	4605      	mov	r5, r0
 800772c:	b118      	cbz	r0, 8007736 <__swbuf_r+0x12>
 800772e:	6983      	ldr	r3, [r0, #24]
 8007730:	b90b      	cbnz	r3, 8007736 <__swbuf_r+0x12>
 8007732:	f7ff fa25 	bl	8006b80 <__sinit>
 8007736:	4b21      	ldr	r3, [pc, #132]	; (80077bc <__swbuf_r+0x98>)
 8007738:	429c      	cmp	r4, r3
 800773a:	d12b      	bne.n	8007794 <__swbuf_r+0x70>
 800773c:	686c      	ldr	r4, [r5, #4]
 800773e:	69a3      	ldr	r3, [r4, #24]
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	071a      	lsls	r2, r3, #28
 8007746:	d52f      	bpl.n	80077a8 <__swbuf_r+0x84>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	b36b      	cbz	r3, 80077a8 <__swbuf_r+0x84>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	1ac0      	subs	r0, r0, r3
 8007752:	6963      	ldr	r3, [r4, #20]
 8007754:	b2f6      	uxtb	r6, r6
 8007756:	4283      	cmp	r3, r0
 8007758:	4637      	mov	r7, r6
 800775a:	dc04      	bgt.n	8007766 <__swbuf_r+0x42>
 800775c:	4621      	mov	r1, r4
 800775e:	4628      	mov	r0, r5
 8007760:	f7ff f968 	bl	8006a34 <_fflush_r>
 8007764:	bb30      	cbnz	r0, 80077b4 <__swbuf_r+0x90>
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	3b01      	subs	r3, #1
 800776a:	60a3      	str	r3, [r4, #8]
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	701e      	strb	r6, [r3, #0]
 8007774:	6963      	ldr	r3, [r4, #20]
 8007776:	3001      	adds	r0, #1
 8007778:	4283      	cmp	r3, r0
 800777a:	d004      	beq.n	8007786 <__swbuf_r+0x62>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d506      	bpl.n	8007790 <__swbuf_r+0x6c>
 8007782:	2e0a      	cmp	r6, #10
 8007784:	d104      	bne.n	8007790 <__swbuf_r+0x6c>
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f7ff f953 	bl	8006a34 <_fflush_r>
 800778e:	b988      	cbnz	r0, 80077b4 <__swbuf_r+0x90>
 8007790:	4638      	mov	r0, r7
 8007792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007794:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <__swbuf_r+0x9c>)
 8007796:	429c      	cmp	r4, r3
 8007798:	d101      	bne.n	800779e <__swbuf_r+0x7a>
 800779a:	68ac      	ldr	r4, [r5, #8]
 800779c:	e7cf      	b.n	800773e <__swbuf_r+0x1a>
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <__swbuf_r+0xa0>)
 80077a0:	429c      	cmp	r4, r3
 80077a2:	bf08      	it	eq
 80077a4:	68ec      	ldreq	r4, [r5, #12]
 80077a6:	e7ca      	b.n	800773e <__swbuf_r+0x1a>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f80c 	bl	80077c8 <__swsetup_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0cb      	beq.n	800774c <__swbuf_r+0x28>
 80077b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077b8:	e7ea      	b.n	8007790 <__swbuf_r+0x6c>
 80077ba:	bf00      	nop
 80077bc:	08007e08 	.word	0x08007e08
 80077c0:	08007e28 	.word	0x08007e28
 80077c4:	08007de8 	.word	0x08007de8

080077c8 <__swsetup_r>:
 80077c8:	4b32      	ldr	r3, [pc, #200]	; (8007894 <__swsetup_r+0xcc>)
 80077ca:	b570      	push	{r4, r5, r6, lr}
 80077cc:	681d      	ldr	r5, [r3, #0]
 80077ce:	4606      	mov	r6, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	b125      	cbz	r5, 80077de <__swsetup_r+0x16>
 80077d4:	69ab      	ldr	r3, [r5, #24]
 80077d6:	b913      	cbnz	r3, 80077de <__swsetup_r+0x16>
 80077d8:	4628      	mov	r0, r5
 80077da:	f7ff f9d1 	bl	8006b80 <__sinit>
 80077de:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <__swsetup_r+0xd0>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d10f      	bne.n	8007804 <__swsetup_r+0x3c>
 80077e4:	686c      	ldr	r4, [r5, #4]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ec:	0719      	lsls	r1, r3, #28
 80077ee:	d42c      	bmi.n	800784a <__swsetup_r+0x82>
 80077f0:	06dd      	lsls	r5, r3, #27
 80077f2:	d411      	bmi.n	8007818 <__swsetup_r+0x50>
 80077f4:	2309      	movs	r3, #9
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007802:	e03e      	b.n	8007882 <__swsetup_r+0xba>
 8007804:	4b25      	ldr	r3, [pc, #148]	; (800789c <__swsetup_r+0xd4>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d101      	bne.n	800780e <__swsetup_r+0x46>
 800780a:	68ac      	ldr	r4, [r5, #8]
 800780c:	e7eb      	b.n	80077e6 <__swsetup_r+0x1e>
 800780e:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <__swsetup_r+0xd8>)
 8007810:	429c      	cmp	r4, r3
 8007812:	bf08      	it	eq
 8007814:	68ec      	ldreq	r4, [r5, #12]
 8007816:	e7e6      	b.n	80077e6 <__swsetup_r+0x1e>
 8007818:	0758      	lsls	r0, r3, #29
 800781a:	d512      	bpl.n	8007842 <__swsetup_r+0x7a>
 800781c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800781e:	b141      	cbz	r1, 8007832 <__swsetup_r+0x6a>
 8007820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007824:	4299      	cmp	r1, r3
 8007826:	d002      	beq.n	800782e <__swsetup_r+0x66>
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fa85 	bl	8006d38 <_free_r>
 800782e:	2300      	movs	r3, #0
 8007830:	6363      	str	r3, [r4, #52]	; 0x34
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	2300      	movs	r3, #0
 800783c:	6063      	str	r3, [r4, #4]
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	b94b      	cbnz	r3, 8007862 <__swsetup_r+0x9a>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	d003      	beq.n	8007862 <__swsetup_r+0x9a>
 800785a:	4621      	mov	r1, r4
 800785c:	4630      	mov	r0, r6
 800785e:	f000 f847 	bl	80078f0 <__smakebuf_r>
 8007862:	89a0      	ldrh	r0, [r4, #12]
 8007864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007868:	f010 0301 	ands.w	r3, r0, #1
 800786c:	d00a      	beq.n	8007884 <__swsetup_r+0xbc>
 800786e:	2300      	movs	r3, #0
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	6963      	ldr	r3, [r4, #20]
 8007874:	425b      	negs	r3, r3
 8007876:	61a3      	str	r3, [r4, #24]
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	b943      	cbnz	r3, 800788e <__swsetup_r+0xc6>
 800787c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007880:	d1ba      	bne.n	80077f8 <__swsetup_r+0x30>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	0781      	lsls	r1, r0, #30
 8007886:	bf58      	it	pl
 8007888:	6963      	ldrpl	r3, [r4, #20]
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	e7f4      	b.n	8007878 <__swsetup_r+0xb0>
 800788e:	2000      	movs	r0, #0
 8007890:	e7f7      	b.n	8007882 <__swsetup_r+0xba>
 8007892:	bf00      	nop
 8007894:	2000006c 	.word	0x2000006c
 8007898:	08007e08 	.word	0x08007e08
 800789c:	08007e28 	.word	0x08007e28
 80078a0:	08007de8 	.word	0x08007de8

080078a4 <__swhatbuf_r>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	460e      	mov	r6, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	2900      	cmp	r1, #0
 80078ae:	b096      	sub	sp, #88	; 0x58
 80078b0:	4614      	mov	r4, r2
 80078b2:	461d      	mov	r5, r3
 80078b4:	da08      	bge.n	80078c8 <__swhatbuf_r+0x24>
 80078b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	061a      	lsls	r2, r3, #24
 80078c0:	d410      	bmi.n	80078e4 <__swhatbuf_r+0x40>
 80078c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078c6:	e00e      	b.n	80078e6 <__swhatbuf_r+0x42>
 80078c8:	466a      	mov	r2, sp
 80078ca:	f000 f851 	bl	8007970 <_fstat_r>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	dbf1      	blt.n	80078b6 <__swhatbuf_r+0x12>
 80078d2:	9a01      	ldr	r2, [sp, #4]
 80078d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078dc:	425a      	negs	r2, r3
 80078de:	415a      	adcs	r2, r3
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	e7ee      	b.n	80078c2 <__swhatbuf_r+0x1e>
 80078e4:	2340      	movs	r3, #64	; 0x40
 80078e6:	2000      	movs	r0, #0
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	b016      	add	sp, #88	; 0x58
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080078f0 <__smakebuf_r>:
 80078f0:	898b      	ldrh	r3, [r1, #12]
 80078f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078f4:	079d      	lsls	r5, r3, #30
 80078f6:	4606      	mov	r6, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	d507      	bpl.n	800790c <__smakebuf_r+0x1c>
 80078fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	6123      	str	r3, [r4, #16]
 8007904:	2301      	movs	r3, #1
 8007906:	6163      	str	r3, [r4, #20]
 8007908:	b002      	add	sp, #8
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	ab01      	add	r3, sp, #4
 800790e:	466a      	mov	r2, sp
 8007910:	f7ff ffc8 	bl	80078a4 <__swhatbuf_r>
 8007914:	9900      	ldr	r1, [sp, #0]
 8007916:	4605      	mov	r5, r0
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff fa79 	bl	8006e10 <_malloc_r>
 800791e:	b948      	cbnz	r0, 8007934 <__smakebuf_r+0x44>
 8007920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007924:	059a      	lsls	r2, r3, #22
 8007926:	d4ef      	bmi.n	8007908 <__smakebuf_r+0x18>
 8007928:	f023 0303 	bic.w	r3, r3, #3
 800792c:	f043 0302 	orr.w	r3, r3, #2
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	e7e3      	b.n	80078fc <__smakebuf_r+0xc>
 8007934:	4b0d      	ldr	r3, [pc, #52]	; (800796c <__smakebuf_r+0x7c>)
 8007936:	62b3      	str	r3, [r6, #40]	; 0x28
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	6020      	str	r0, [r4, #0]
 800793c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	6163      	str	r3, [r4, #20]
 8007946:	9b01      	ldr	r3, [sp, #4]
 8007948:	6120      	str	r0, [r4, #16]
 800794a:	b15b      	cbz	r3, 8007964 <__smakebuf_r+0x74>
 800794c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007950:	4630      	mov	r0, r6
 8007952:	f000 f81f 	bl	8007994 <_isatty_r>
 8007956:	b128      	cbz	r0, 8007964 <__smakebuf_r+0x74>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	81a3      	strh	r3, [r4, #12]
 8007964:	89a0      	ldrh	r0, [r4, #12]
 8007966:	4305      	orrs	r5, r0
 8007968:	81a5      	strh	r5, [r4, #12]
 800796a:	e7cd      	b.n	8007908 <__smakebuf_r+0x18>
 800796c:	08006b19 	.word	0x08006b19

08007970 <_fstat_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_fstat_r+0x20>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	f7f9 fe16 	bl	80015ae <_fstat>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d102      	bne.n	800798c <_fstat_r+0x1c>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b103      	cbz	r3, 800798c <_fstat_r+0x1c>
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	bf00      	nop
 8007990:	20004660 	.word	0x20004660

08007994 <_isatty_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d06      	ldr	r5, [pc, #24]	; (80079b0 <_isatty_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7f9 fe15 	bl	80015ce <_isatty>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_isatty_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_isatty_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	20004660 	.word	0x20004660

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
